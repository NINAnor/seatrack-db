<?xml version="1.0" encoding="UTF-8"?>
<!--
CAUTION: Do not modify this file unless you know what you are doing.
         Unexpected results may occur if the code is changed deliberately.
-->
<dbmodel pgmodeler-ver="0.9.2-alpha" last-position="0,0" last-zoom="1"
	 default-schema="public" default-owner="postgres">
<role name="seatrack_admin"
      superuser="true"
      createdb="true"
      createrole="true"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="zabbix"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="testreader"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="shinyuser"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="jens_astrom"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="vegard_braathen"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="halfdan_helgason"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="borge_moe"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="hallvard_strom"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="sebastien_descamps"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="benjamin_merkel"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="conrad_helgeland"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="per_fauchald"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="arnaud_tarroux"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="admin"
      superuser="true"
      createrole="true"
      inherit="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
	<roles names="seatrack_admin,jens_astrom" role-type="member" />
</role>

<role name="pure_ftp"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="restricted"
      inherit="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
	<roles names="pure_ftp" role-type="member" />
</role>

<role name="elinborg_palsdottir"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="testwriter"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="francoise_amelineau"
      inherit="true"
      login="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
</role>

<role name="seatrack_metadata_writer"
      inherit="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
	<roles names="admin,vegard_braathen,halfdan_helgason,elinborg_palsdottir" role-type="member" />
</role>

<role name="seatrack_writer"
      inherit="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
	<roles names="admin,seatrack_metadata_writer,vegard_braathen,halfdan_helgason,borge_moe,elinborg_palsdottir,testwriter" role-type="member" />
</role>

<role name="seatrack_reader"
      inherit="true"
      encrypted="true"
      password="********"
      sql-disabled="true">
	<roles names="seatrack_writer,admin,testreader,shinyuser,hallvard_strom,sebastien_descamps,benjamin_merkel,conrad_helgeland,per_fauchald,testwriter,francoise_amelineau,arnaud_tarroux" role-type="member" />
</role>

<tablespace name="seatrack" directory="'/data/seatrack'" sql-disabled="true">
	<role name="seatrack_admin"/>
</tablespace>

<database name="seatrack_devel" encoding="UTF8" template="template0" lc-collate="en_US.UTF-8" lc-ctype="en_US.UTF-8" is-template="false" allow-conns="true">
	<role name="admin"/>
	<tablespace name="pg_default"/>
</database>

<schema name="public" rect-visible="true" fill-color="#e1e1e1" sql-disabled="true">
</schema>

<extension name="postgis">
	<schema name="public"/>
	<comment><![CDATA[PostGIS geometry, geography, and raster spatial types and functions]]></comment>
</extension>

<extension name="uuid-ossp" cur-version="1.1">
	<schema name="public"/>
	<comment><![CDATA[generate universally unique identifiers (UUIDs)]]></comment>
</extension>

<extension name="adminpack" cur-version="1.0">
	<schema name="pg_catalog"/>
	<comment><![CDATA[administrative functions for PostgreSQL]]></comment>
</extension>

<extension name="tsm_system_rows" cur-version="1.0">
	<schema name="public"/>
	<comment><![CDATA[TABLESAMPLE method which accepts number of rows as a limit]]></comment>
</extension>

<schema name="config" rect-visible="true" fill-color="#83af1f">
	<role name="admin"/>
</schema>

<schema name="metadata" rect-visible="true" fill-color="#5aa578">
	<role name="admin"/>
</schema>

<schema name="loggers" rect-visible="true" fill-color="#4b3e56">
	<role name="admin"/>
</schema>

<schema name="individuals" rect-visible="true" fill-color="#9ac721">
	<role name="admin"/>
</schema>

<schema name="positions" rect-visible="true" fill-color="#249b49">
	<role name="admin"/>
</schema>

<schema name="recordings" rect-visible="true" fill-color="#942665">
	<role name="admin"/>
</schema>

<schema name="views" rect-visible="true" fill-color="#abb258">
	<role name="admin"/>
</schema>

<schema name="functions" rect-visible="true" fill-color="#94e1e5">
	<role name="admin"/>
</schema>

<schema name="imports" rect-visible="true" fill-color="#a239f5">
	<role name="admin"/>
</schema>

<sequence name="logger_info_logger_id_seq" cycle="false" start="1" increment="1" min-value="1" max-value="9223372036854775807" cache="1">
	<schema name="loggers"/>
	<role name="admin"/>
</sequence>

<table name="logger_info">
	<schema name="loggers"/>
	<role name="admin"/>
	<position x="2003.85" y="50"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="logger_id" not-null="true" sequence="loggers.logger_info_logger_id_seq">
		<type name="integer" length="0"/>
	</column>
	<column name="logger_serial_no" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="logger_model" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="producer" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="production_year" not-null="true">
		<type name="smallint" length="0"/>
	</column>
	<column name="project">
		<type name="text" length="0"/>
	</column>
	<constraint name="logger_info_pk" type="pk-constr" table="loggers.logger_info">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="logger_id_unique" type="uq-constr" table="loggers.logger_info">
		<columns names="logger_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="logger_mod_serial_uq" type="uq-constr" table="loggers.logger_info">
		<columns names="logger_model,logger_serial_no" ref-type="src-columns"/>
	</constraint>
</table>

<table name="logger_producers">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="304.827" y="50"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="producer" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="logger_producers_pk" type="pk-constr" table="metadata.logger_producers">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="producer_unique_constraint" type="uq-constr" table="metadata.logger_producers">
		<columns names="producer" ref-type="src-columns"/>
	</constraint>
</table>

<table name="logger_models">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="666.457" y="50"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="producer" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="model" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="logger_models_pk" type="pk-constr" table="metadata.logger_models">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="model_unique" type="uq-constr" table="metadata.logger_models">
		<columns names="producer,model" ref-type="src-columns"/>
	</constraint>
</table>

<table name="logging_modes">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="989.087" y="50"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="mode" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="clipped_lightrange">
		<type name="boolean" length="0"/>
	</column>
	<constraint name="logging_modes_pk" type="pk-constr" table="metadata.logging_modes">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="logging_modes_unique" type="uq-constr" table="metadata.logging_modes">
		<columns names="mode" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="people_person_id_seq" cycle="false" start="1" increment="1" min-value="1" max-value="9223372036854775807" cache="1">
	<schema name="metadata"/>
	<role name="admin"/>
</sequence>

<table name="people">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="1322.72" y="50"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="name" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="person_id" not-null="true" sequence="metadata.people_person_id_seq">
		<type name="integer" length="0"/>
	</column>
	<column name="abrev_name" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="people_pk" type="pk-constr" table="metadata.people">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="names_unique" type="uq-constr" table="metadata.people">
		<columns names="name" ref-type="src-columns"/>
	</constraint>
	<constraint name="person_id_uq" type="uq-constr" table="metadata.people">
		<columns names="person_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="allocation">
	<schema name="loggers"/>
	<role name="admin"/>
	<position x="2389.48" y="50"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="session_id">
		<type name="text" length="0"/>
	</column>
	<column name="logger_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="intended_species">
		<type name="text" length="0"/>
	</column>
	<column name="intended_location">
		<type name="text" length="0"/>
	</column>
	<column name="intended_deployer">
		<type name="text" length="0"/>
	</column>
	<column name="starttime_gmt">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="allocation_pk" type="pk-constr" table="loggers.allocation">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="allocation_session_id_unique" type="uq-constr" table="loggers.allocation">
		<columns names="session_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="logging_session">
	<schema name="loggers"/>
	<role name="admin"/>
	<position x="2803.11" y="50"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="session_id">
		<type name="text" length="0"/>
	</column>
	<column name="logger_id">
		<type name="integer" length="0"/>
	</column>
	<column name="deployment_id">
		<type name="integer" length="0"/>
	</column>
	<column name="retrieval_id">
		<type name="integer" length="0"/>
	</column>
	<column name="active" default-value="true">
		<type name="boolean" length="0"/>
	</column>
	<column name="colony">
		<type name="text" length="0"/>
	</column>
	<column name="species">
		<type name="text" length="0"/>
	</column>
	<column name="year_tracked">
		<type name="text" length="0"/>
	</column>
	<column name="individ_id">
		<type name="text" length="0"/>
	</column>
	<column name="last_updated">
		<type name="timestamp" length="0"/>
	</column>
	<column name="updated_by">
		<type name="text" length="0"/>
	</column>
	<constraint name="logging_session_pk" type="pk-constr" table="loggers.logging_session">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="logging_session_session_id_unique" type="uq-constr" table="loggers.logging_session">
		<columns names="session_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="retrieval_id" type="uq-constr" table="loggers.logging_session">
		<columns names="retrieval_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="deployment_id" type="uq-constr" table="loggers.logging_session">
		<columns names="deployment_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="species">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="1614.73" y="50"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="species_name_eng" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="species_name_latin" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="species_pk" type="pk-constr" table="metadata.species">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="species_name_unique" type="uq-constr" table="metadata.species">
		<columns names="species_name_eng" ref-type="src-columns"/>
	</constraint>
	<constraint name="species_name_latin_unique" type="uq-constr" table="metadata.species">
		<columns names="species_name_latin" ref-type="src-columns"/>
	</constraint>
</table>

<table name="colony">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="304.827" y="237.25"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="lat">
		<type name="double precision" length="0"/>
	</column>
	<column name="lon">
		<type name="double precision" length="0"/>
	</column>
	<column name="colony_int_name">
		<type name="text" length="0"/>
	</column>
	<column name="colony_nat_name">
		<type name="text" length="0"/>
	</column>
	<column name="geom">
		<type name="geometry" length="0"/>
	</column>
	<constraint name="colony_pk" type="pk-constr" table="metadata.colony">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="colony_int_name_unique" type="uq-constr" table="metadata.colony">
		<columns names="colony_int_name" ref-type="src-columns"/>
	</constraint>
	<constraint name="colony_nat_unique" type="uq-constr" table="metadata.colony">
		<columns names="colony_nat_name" ref-type="src-columns"/>
	</constraint>
</table>

<table name="location">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="649.457" y="237.25"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="location_name" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="colony_int_name" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="colony_nat_name" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="lat">
		<type name="double precision" length="0"/>
	</column>
	<column name="lon">
		<type name="double precision" length="0"/>
	</column>
	<column name="geom">
		<type name="geometry" length="0"/>
	</column>
	<constraint name="location_pk" type="pk-constr" table="metadata.location">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="location_unique" type="uq-constr" table="metadata.location">
		<columns names="location_name" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="deployment_deployment_id_seq" cycle="false" start="1" increment="1" min-value="1" max-value="9223372036854775807" cache="1">
	<schema name="loggers"/>
	<role name="admin"/>
</sequence>

<table name="deployment">
	<schema name="loggers"/>
	<role name="admin"/>
	<position x="3199.74" y="50"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="session_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="deployment_id" not-null="true" sequence="loggers.deployment_deployment_id_seq">
		<type name="integer" length="0"/>
	</column>
	<column name="logger_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="individ_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="logger_fate">
		<type name="text" length="0"/>
	</column>
	<column name="deployment_species">
		<type name="text" length="0"/>
	</column>
	<column name="deployment_location" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="deployment_date" not-null="true">
		<type name="date" length="0"/>
	</column>
	<column name="logger_mount_method">
		<type name="text" length="0"/>
	</column>
	<constraint name="deployment_pk" type="pk-constr" table="loggers.deployment">
		<columns names="id,deployment_date" ref-type="src-columns"/>
	</constraint>
	<constraint name="deployment_id_unique" type="uq-constr" table="loggers.deployment">
		<columns names="deployment_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="deployment_session_id_uq" type="uq-constr" table="loggers.deployment">
		<columns names="session_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="logger_fate">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="1017.09" y="237.25"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="logger_fate" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="logger_fate_pk" type="pk-constr" table="metadata.logger_fate">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="fate_unique" type="uq-constr" table="metadata.logger_fate">
		<columns names="logger_fate" ref-type="src-columns"/>
	</constraint>
</table>

<table name="individ_info">
	<schema name="individuals"/>
	<role name="admin"/>
	<position x="48.8235" y="1008.05"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="individ_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="ring_number">
		<type name="text" length="0"/>
	</column>
	<column name="euring_code">
		<type name="text" length="0"/>
	</column>
	<column name="species">
		<type name="text" length="0"/>
	</column>
	<column name="color_ring">
		<type name="text" length="0"/>
	</column>
	<column name="morph">
		<type name="text" length="0"/>
	</column>
	<column name="subspecies">
		<type name="text" length="0"/>
	</column>
	<column name="age">
		<type name="text" length="0"/>
	</column>
	<column name="sex">
		<type name="text" length="0"/>
	</column>
	<column name="sexing_method">
		<type name="text" length="0"/>
	</column>
	<column name="latest_info_date" not-null="true">
		<type name="date" length="0"/>
	</column>
	<column name="data_responsible">
		<type name="text" length="0"/>
	</column>
	<column name="status_id">
		<type name="integer" length="0"/>
	</column>
	<constraint name="individ_info_pk" type="pk-constr" table="individuals.individ_info">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="individ_id_uq" type="uq-constr" table="individuals.individ_info">
		<columns names="individ_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="metalring_uq" type="uq-constr" table="individuals.individ_info">
		<columns names="ring_number,euring_code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sex">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="1308.72" y="237.25"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="sex" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="sex_pk" type="pk-constr" table="metadata.sex">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="sex_unique" type="uq-constr" table="metadata.sex">
		<columns names="sex" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sexing_method">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="1578.35" y="237.25"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="method">
		<type name="text" length="0"/>
	</column>
	<constraint name="sexing_method_pk" type="pk-constr" table="metadata.sexing_method">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="sexing_method_unique" type="uq-constr" table="metadata.sexing_method">
		<columns names="method" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="individ_status_status_id_seq" cycle="false" start="1" increment="1" min-value="1" max-value="9223372036854775807" cache="1">
	<schema name="individuals"/>
	<role name="admin"/>
</sequence>

<table name="individ_status">
	<schema name="individuals"/>
	<role name="admin"/>
	<position x="395.63" y="1008.05"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="logger_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="status_date">
		<type name="date" length="0"/>
	</column>
	<column name="status_id" not-null="true" sequence="individuals.individ_status_status_id_seq">
		<type name="integer" length="0"/>
	</column>
	<column name="session_id">
		<type name="text" length="0"/>
	</column>
	<column name="weight">
		<type name="double precision" length="0"/>
	</column>
	<column name="scull">
		<type name="double precision" length="0"/>
	</column>
	<column name="tarsus">
		<type name="double precision" length="0"/>
	</column>
	<column name="wing">
		<type name="double precision" length="0"/>
	</column>
	<column name="breeding_stage">
		<type name="text" length="0"/>
	</column>
	<column name="eggs">
		<type name="smallint" length="0"/>
	</column>
	<column name="chicks">
		<type name="smallint" length="0"/>
	</column>
	<column name="hatching_success">
		<type name="boolean" length="0"/>
	</column>
	<column name="breeding_success">
		<type name="boolean" length="0"/>
	</column>
	<column name="breeding_success_criterion">
		<type name="text" length="0"/>
	</column>
	<column name="data_responsible" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="back_on_nest">
		<type name="boolean" length="0"/>
	</column>
	<column name="comment">
		<type name="text" length="0"/>
	</column>
	<column name="location">
		<type name="text" length="0"/>
	</column>
	<column name="ring_number" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="euring_code" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="species">
		<type name="text" length="0"/>
	</column>
	<column name="color_ring">
		<type name="text" length="0"/>
	</column>
	<column name="morph">
		<type name="text" length="0"/>
	</column>
	<column name="subspecies">
		<type name="text" length="0"/>
	</column>
	<column name="age">
		<type name="text" length="0"/>
	</column>
	<column name="sex">
		<type name="text" length="0"/>
	</column>
	<column name="sexing_method">
		<type name="text" length="0"/>
	</column>
	<constraint name="individ_status_pk" type="pk-constr" table="individuals.individ_status">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="status_id" type="uq-constr" table="individuals.individ_status">
		<columns names="status_id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="retrieval_retrieval_id_seq" cycle="false" start="1" increment="1" min-value="1" max-value="9223372036854775807" cache="1">
	<schema name="loggers"/>
	<role name="admin"/>
</sequence>

<table name="retrieval">
	<schema name="loggers"/>
	<role name="admin"/>
	<position x="3628.37" y="50"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="session_id">
		<type name="text" length="0"/>
	</column>
	<column name="retrieval_id" not-null="true" sequence="loggers.retrieval_retrieval_id_seq">
		<type name="integer" length="0"/>
	</column>
	<column name="attribute_name">
		<type name="text" length="0"/>
	</column>
	<column name="logger_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="individ_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="retrieval_type">
		<type name="text" length="0"/>
	</column>
	<column name="retrieval_location">
		<type name="text" length="0"/>
	</column>
	<column name="retrieval_date" not-null="true">
		<type name="date" length="0"/>
	</column>
	<constraint name="retrieval_pk" type="pk-constr" table="loggers.retrieval">
		<columns names="id,retrieval_date" ref-type="src-columns"/>
	</constraint>
	<constraint name="retrieval_id_unique" type="uq-constr" table="loggers.retrieval">
		<columns names="retrieval_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="retrieval_session_id_uq" type="uq-constr" table="loggers.retrieval">
		<columns names="session_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="shutdown">
	<schema name="loggers"/>
	<role name="admin"/>
	<position x="2003.85" y="531.25"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="session_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="download_type" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="download_date">
		<type name="date" length="0"/>
	</column>
	<column name="field_status">
		<type name="text" length="0"/>
	</column>
	<column name="downloaded_by">
		<type name="text" length="0"/>
	</column>
	<column name="decomissioned">
		<type name="boolean" length="0"/>
	</column>
	<column name="shutdown_date">
		<type name="date" length="0"/>
	</column>
	<column name="logger_stored">
		<type name="text" length="0"/>
	</column>
	<constraint name="shutdown_pk" type="pk-constr" table="loggers.shutdown">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="shutdown_session_id_unique" type="uq-constr" table="loggers.shutdown">
		<columns names="session_id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="file_archive_file_id_seq" cycle="false" start="1" increment="1" min-value="1" max-value="9223372036854775807" cache="1">
	<schema name="loggers"/>
	<role name="admin"/>
</sequence>

<table name="file_archive">
	<schema name="loggers"/>
	<role name="admin"/>
	<position x="2402.48" y="531.25"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="file_id" not-null="true" sequence="loggers.file_archive_file_id_seq">
		<type name="integer" length="0"/>
	</column>
	<column name="session_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="filename">
		<type name="text" length="0"/>
	</column>
	<column name="file_basename">
		<type name="text" length="0"/>
	</column>
	<constraint name="file_archive_pk" type="pk-constr" table="loggers.file_archive">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="filename_uq" type="uq-constr" table="loggers.file_archive">
		<columns names="filename" ref-type="src-columns"/>
	</constraint>
</table>

<table name="postable">
	<schema name="positions"/>
	<role name="admin"/>
	<position x="1321.99" y="1008.05"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="date_time" not-null="true">
		<type name="timestamp" length="0" precision="0"/>
	</column>
	<column name="logger" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="logger_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="logger_model" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="year_tracked" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="session_id">
		<type name="text" length="0"/>
	</column>
	<column name="year_deployed" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="year_retrieved" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="ring_number">
		<type name="text" length="0"/>
	</column>
	<column name="euring_code">
		<type name="text" length="0"/>
	</column>
	<column name="species" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="colony" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="lon_raw">
		<type name="double precision" length="0"/>
	</column>
	<column name="lat_raw">
		<type name="double precision" length="0"/>
	</column>
	<column name="lon_smooth1">
		<type name="double precision" length="0"/>
	</column>
	<column name="lat_smooth1">
		<type name="double precision" length="0"/>
	</column>
	<column name="lon_smooth2">
		<type name="double precision" length="0"/>
	</column>
	<column name="lat_smooth2">
		<type name="double precision" length="0"/>
	</column>
	<column name="disttocol_s2">
		<type name="double precision" length="0"/>
	</column>
	<column name="eqfilter1">
		<type name="smallint" length="0"/>
	</column>
	<column name="eqfilter2">
		<type name="smallint" length="0"/>
	</column>
	<column name="eqfilter3">
		<type name="smallint" length="0"/>
	</column>
	<column name="lat_smooth2_eqfilt3">
		<type name="double precision" length="0"/>
	</column>
	<column name="sex">
		<type name="text" length="0"/>
	</column>
	<column name="morph">
		<type name="text" length="0"/>
	</column>
	<column name="subspecies">
		<type name="text" length="0"/>
	</column>
	<column name="age">
		<type name="text" length="0"/>
	</column>
	<column name="col_lon">
		<type name="double precision" length="0"/>
	</column>
	<column name="col_lat">
		<type name="double precision" length="0"/>
	</column>
	<column name="tfirst">
		<type name="timestamp" length="0" precision="0"/>
	</column>
	<column name="tsecond">
		<type name="timestamp" length="0" precision="0"/>
	</column>
	<column name="twl_type">
		<type name="smallint" length="0"/>
	</column>
	<column name="conf">
		<type name="smallint" length="0"/>
	</column>
	<column name="sun">
		<type name="double precision" length="0"/>
	</column>
	<column name="software">
		<type name="text" length="0"/>
	</column>
	<column name="light_threshold">
		<type name="smallint" length="0"/>
	</column>
	<column name="analyzer">
		<type name="text" length="0"/>
	</column>
	<column name="data_responsible">
		<type name="text" length="0"/>
	</column>
	<column name="logger_yeartracked">
		<type name="text" length="0"/>
	</column>
	<column name="posdata_file">
		<type name="text" length="0"/>
	</column>
	<column name="import_date">
		<type name="date" length="0"/>
	</column>
	<column name="data_version" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="database_version" default-value="2">
		<type name="integer" length="0"/>
	</column>
	<column name="automated_ver">
		<type name="text" length="0"/>
	</column>
	<constraint name="postable_pk" type="pk-constr" table="positions.postable">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="processing">
	<schema name="positions"/>
	<role name="admin"/>
	<position x="1707.72" y="1008.05"/>
	<column name="id" not-null="true">
		<type name="uuid" length="0"/>
	</column>
	<column name="logger_yertracked" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="session_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="firstdate_light">
		<type name="date" length="0"/>
	</column>
	<column name="lastdate_light">
		<type name="date" length="0"/>
	</column>
	<column name="first_aut_eq">
		<type name="date" length="0"/>
	</column>
	<column name="last_aut_eq">
		<type name="date" length="0"/>
	</column>
	<column name="first_spring_eq">
		<type name="date" length="0"/>
	</column>
	<column name="last_spring_eq">
		<type name="date" length="0"/>
	</column>
	<column name="software">
		<type name="text" length="0"/>
	</column>
	<column name="light_threshold">
		<type name="double precision" length="0"/>
	</column>
	<column name="trn_file">
		<type name="text" length="0"/>
	</column>
	<column name="processing_file">
		<type name="text" length="0"/>
	</column>
	<column name="posdata_file">
		<type name="text" length="0"/>
	</column>
	<column name="logger_download_success">
		<type name="boolean" length="0"/>
	</column>
	<column name="logger_date_failed">
		<type name="boolean" length="0"/>
	</column>
	<column name="analyzer">
		<type name="text" length="0"/>
	</column>
	<column name="logger_id_retrieved">
		<type name="bigint" length="0"/>
	</column>
	<column name="year_tracked">
		<type name="smallint" length="0"/>
	</column>
	<column name="year_retrieved">
		<type name="smallint" length="0"/>
	</column>
	<column name="logger_model_retrieved">
		<type name="text" length="0"/>
	</column>
	<column name="logger_producer">
		<type name="text" length="0"/>
	</column>
	<column name="ring_number">
		<type name="text" length="0"/>
	</column>
	<column name="euring_code">
		<type name="text" length="0"/>
	</column>
	<column name="species">
		<type name="text" length="0"/>
	</column>
	<column name="sex">
		<type name="text" length="0"/>
	</column>
	<column name="morph">
		<type name="text" length="0"/>
	</column>
	<column name="subspecies">
		<type name="text" length="0"/>
	</column>
	<column name="age">
		<type name="smallint" length="0"/>
	</column>
	<column name="colony">
		<type name="text" length="0"/>
	</column>
	<constraint name="processing_pk" type="pk-constr" table="positions.processing">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="subspecies">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="304.827" y="508.5"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="species_name_eng" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="species_name_latin" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="sub_species">
		<type name="text" length="0"/>
	</column>
	<constraint name="subspecies_pk" type="pk-constr" table="metadata.subspecies">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="species_uq" type="uq-constr" table="metadata.subspecies">
		<columns names="sub_species,species_name_eng" ref-type="src-columns"/>
		<comment><![CDATA[Might not be necessarily unique?]]></comment>
	</constraint>
	<constraint name="species_latin_subspecies_uq" type="uq-constr" table="metadata.subspecies">
		<columns names="species_name_latin,sub_species" ref-type="src-columns"/>
	</constraint>
</table>

<table name="events">
	<schema name="loggers"/>
	<role name="admin"/>
	<position x="2695.9" y="531.25"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="logger_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="event_date" not-null="true">
		<type name="date" length="0"/>
	</column>
	<column name="status_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="deployment_id">
		<type name="integer" length="0"/>
	</column>
	<column name="retrieval_id">
		<type name="integer" length="0"/>
	</column>
	<column name="blood_sample">
		<type name="text" length="0"/>
	</column>
	<column name="feather_sample">
		<type name="text" length="0"/>
	</column>
	<column name="other_samples">
		<type name="text" length="0"/>
	</column>
	<constraint name="events_pk" type="pk-constr" table="loggers.events">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="status_id" type="uq-constr" table="loggers.events">
		<columns names="status_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="event_id_deployment_id_uq" type="uq-constr" table="loggers.events">
		<columns names="status_id,deployment_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="event_id_retrieval_uq" type="uq-constr" table="loggers.events">
		<columns names="status_id,retrieval_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="logger_date_uq" type="uq-constr" table="loggers.events">
		<columns names="logger_id,event_date" ref-type="src-columns"/>
	</constraint>
</table>

<table name="logger_year_tracked">
	<schema name="positions"/>
	<role name="admin"/>
	<position x="2232.45" y="1008.05"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="session_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="logger" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="logger_year_tracked" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="logger_year_tracked_pk" type="pk-constr" table="positions.logger_year_tracked">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="session_id_uq" type="uq-constr" table="positions.logger_year_tracked">
		<columns names="session_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="temperature">
	<schema name="recordings"/>
	<role name="admin"/>
	<position x="3255.54" y="1008.05"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="session_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="filename" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="individ_id">
		<type name="text" length="0"/>
	</column>
	<column name="date_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="wet_min">
		<type name="double precision" length="0"/>
	</column>
	<column name="wet_max">
		<type name="double precision" length="0"/>
	</column>
	<column name="wet_mean">
		<type name="double precision" length="0"/>
	</column>
	<column name="num_samples">
		<type name="integer" length="0"/>
	</column>
	<constraint name="temperature_pk" type="pk-constr" table="recordings.temperature">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="activity">
	<schema name="recordings"/>
	<role name="admin"/>
	<position x="3569.27" y="1008.05"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="session_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="filename" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="individ_id">
		<type name="text" length="0"/>
	</column>
	<column name="date_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="conductivity">
		<type name="double precision" length="0"/>
	</column>
	<column name="std_conductivity">
		<type name="double precision" length="0"/>
	</column>
	<constraint name="salinity_pk" type="pk-constr" table="recordings.activity">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<view name="postable">
	<schema name="views"/>
	<role name="admin"/>
	<position x="50" y="2732.55"/>
	<reference>
		<expression><![CDATA[ SELECT p.id,
    p.date_time,
    p.logger,
    p.logger_id,
    p.logger_model,
    p.year_tracked,
    p.session_id,
    p.year_deployed,
    p.year_retrieved,
    p.ring_number,
    p.euring_code,
    p.species,
    p.colony,
    p.lon_raw,
    p.lat_raw,
    p.lon_smooth1,
    p.lat_smooth1,
    p.lon_smooth2,
    p.lat_smooth2,
    p.disttocol_s2,
    p.eqfilter1,
    p.eqfilter2,
    p.eqfilter3,
    p.lat_smooth2_eqfilt3,
    p.sex,
    p.morph,
    p.subspecies,
    p.age,
    p.col_lon,
    p.col_lat,
    p.tfirst,
    p.tsecond,
    p.twl_type,
    p.conf,
    p.sun,
    p.software,
    p.light_threshold,
    p.analyzer,
    p.data_responsible,
    p.logger_yeartracked,
    p.posdata_file,
    p.import_date,
    p.data_version,
    p.database_version
   FROM positions.postable p;]]></expression>
	</reference>
</view>

<view name="active_logging_sessions">
	<schema name="views"/>
	<role name="admin"/>
	<position x="277.827" y="2732.55"/>
	<reference>
		<expression><![CDATA[ SELECT logging_session.id,
    logging_session.session_id,
    logging_session.logger_id,
    logging_session.deployment_id,
    logging_session.retrieval_id,
    logging_session.active,
    logging_session.colony,
    logging_session.species,
    logging_session.year_tracked,
    logging_session.individ_id,
    logging_session.last_updated,
    logging_session.updated_by
   FROM loggers.logging_session
  WHERE (logging_session.active = true);]]></expression>
	</reference>
</view>

<sequence name="startup_session_id_seq" cycle="false" start="1" increment="1" min-value="1" max-value="9223372036854775807" cache="1">
	<schema name="loggers"/>
	<role name="admin"/>
</sequence>

<table name="startup">
	<schema name="loggers"/>
	<role name="admin"/>
	<position x="3060.53" y="531.25"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="session_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="logger_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="starttime_gmt">
		<type name="timestamp" length="0" precision="0"/>
	</column>
	<column name="logging_mode">
		<type name="character varying" length="15"/>
	</column>
	<column name="started_by">
		<type name="text" length="0"/>
	</column>
	<column name="started_where">
		<type name="text" length="0"/>
	</column>
	<column name="days_delayed">
		<type name="smallint" length="0"/>
	</column>
	<column name="programmed_gmt_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="startup_pk" type="pk-constr" table="loggers.startup">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="session_id_unique" type="uq-constr" table="loggers.startup">
		<columns names="session_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="logger_id_starttime_uq" type="uq-constr" table="loggers.startup">
		<columns names="logger_id,starttime_gmt" ref-type="src-columns"/>
	</constraint>
</table>

<function name="fn_update_location_geom"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN	
	UPDATE metadata.location SET 
	geom = ST_SetSRID(ST_MakePoint(NEW.lon,NEW.lat), 4326)
	WHERE id=NEW.id;
	--RAISE NOTICE 'UPDATING geo data for %, [%,%]' , NEW.id, NEW.lat, NEW.lon;	
    RETURN NULL; -- result is ignored since this is an AFTER trigger
  END;
]]></definition>
</function>

<trigger name="tr_insert_location_geom" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="metadata.location">
	<condition><![CDATA[WHEN (pg_trigger_depth() < 1)]]></condition>
		<function signature="functions.fn_update_location_geom()"/>
</trigger>

<trigger name="fn_update_location_geom" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="metadata.location">
	<condition><![CDATA[WHEN (pg_trigger_depth() < 1)]]></condition>
		<function signature="functions.fn_update_location_geom()"/>
</trigger>

<function name="fn_update_colony_geom"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN	
	UPDATE metadata.colony SET 
	geom = ST_SetSRID(ST_MakePoint(NEW.lon,NEW.lat), 4326)
	WHERE id=NEW.id;
	--RAISE NOTICE 'UPDATING geo data for %, [%,%]' , NEW.id, NEW.lat, NEW.lon;	
    RETURN NULL; -- result is ignored since this is an AFTER trigger
  END;
]]></definition>
</function>

<trigger name="tr_insert_colony_geom" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="metadata.colony">
	<condition><![CDATA[WHEN (pg_trigger_depth() < 1)]]></condition>
		<function signature="functions.fn_update_colony_geom()"/>
</trigger>

<trigger name="tr_update_colony_geom" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="metadata.colony">
	<condition><![CDATA[WHEN (pg_trigger_depth() < 1)]]></condition>
		<function signature="functions.fn_update_colony_geom()"/>
</trigger>

<table name="logger_import">
	<schema name="imports"/>
	<role name="admin"/>
	<position x="1285.01" y="2732.55"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="import_time" not-null="true" default-value="(now())::timestamp(0) without time zone">
		<type name="timestamp" length="0" precision="0"/>
	</column>
	<column name="logger_serial_no" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="logger_model" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="producer">
		<type name="text" length="0"/>
	</column>
	<column name="production_year">
		<type name="smallint" length="0"/>
	</column>
	<column name="project">
		<type name="text" length="0"/>
	</column>
	<column name="starttime_gmt">
		<type name="timestamp" length="0" precision="0"/>
	</column>
	<column name="logging_mode">
		<type name="character varying" length="15"/>
	</column>
	<column name="started_by">
		<type name="text" length="0"/>
	</column>
	<column name="started_where">
		<type name="text" length="0"/>
	</column>
	<column name="days_delayed">
		<type name="smallint" length="0"/>
	</column>
	<column name="programmed_gmt_time">
		<type name="timestamp" length="0" precision="0"/>
	</column>
	<column name="intended_species">
		<type name="text" length="0"/>
	</column>
	<column name="intended_location">
		<type name="text" length="0"/>
	</column>
	<column name="intended_deployer">
		<type name="text" length="0"/>
	</column>
	<column name="shutdown_session">
		<type name="boolean" length="0"/>
	</column>
	<column name="field_status">
		<type name="text" length="0"/>
	</column>
	<column name="downloaded_by">
		<type name="text" length="0"/>
	</column>
	<column name="download_date">
		<type name="date" length="0"/>
	</column>
	<column name="download_type">
		<type name="text" length="0"/>
	</column>
	<column name="decomissioned">
		<type name="boolean" length="0"/>
	</column>
	<column name="comment">
		<type name="text" length="0"/>
	</column>
	<column name="shutdown_date">
		<type name="date" length="0"/>
	</column>
	<constraint name="logger_import_pk" type="pk-constr" table="imports.logger_import">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="import_types">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="666.457" y="508.5"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="import_type" not-null="true">
		<type name="character varying" length="20"/>
	</column>
	<constraint name="import_types_pk" type="pk-constr" table="metadata.import_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="import_types_uq" type="uq-constr" table="metadata.import_types">
		<columns names="import_type" ref-type="src-columns"/>
	</constraint>
</table>

<table name="mounting_types">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="1037.67" y="508.5"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="logger_mount_method" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="mounting_types_pk" type="pk-constr" table="metadata.mounting_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="mounting_types_uq" type="uq-constr" table="metadata.mounting_types">
		<columns names="logger_mount_method" ref-type="src-columns"/>
	</constraint>
</table>

<table name="observations">
	<schema name="individuals"/>
	<role name="admin"/>
	<position x="938.26" y="1009.3"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="individ_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="lat" not-null="true">
		<type name="double precision" length="0"/>
	</column>
	<column name="lon" not-null="true">
		<type name="double precision" length="0"/>
	</column>
	<column name="geom">
		<type name="geometry" length="0"/>
	</column>
	<constraint name="observations_pk" type="pk-constr" table="individuals.observations">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<function name="fn_update_observations_geom"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN	
	UPDATE individuals.observations SET 
	geom = ST_SetSRID(ST_MakePoint(NEW.lon,NEW.lat), 4326)
	WHERE id=NEW.id;
	--RAISE NOTICE 'UPDATING geo data for %, [%,%]' , NEW.id, NEW.lat, NEW.lon;	
    RETURN NULL; -- result is ignored since this is an AFTER trigger
  END;
]]></definition>
</function>

<trigger name="tr_insert_observation_geom" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="individuals.observations">
		<function signature="functions.fn_update_observations_geom()"/>
</trigger>

<trigger name="fn_update_observation_geom" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="individuals.observations">
		<function signature="functions.fn_update_observations_geom()"/>
</trigger>

<function name="fn_check_logging_session_not_open"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN

	IF NEW.logger_id || NEW.starttime_gmt::text IN (SELECT logger_id || starttime_gmt::text FROM loggers.startup)
	THEN
		RAISE EXCEPTION 'Logger % already in logging session started the same time. Close this open session before starting new one', NEW.logger_id;
	
	END IF;

	IF  bool_and(logging_session.active = TRUE 
		AND date_part('year', ls.starttime_gmt) = date_part('year', NEW.starttime_gmt))
		FROM loggers.logging_session,loggers.startup ls
		WHERE logging_session.logger_id = NEW.logger_id
		AND ls.logger_id = NEW.logger_id
		THEN
		RAISE EXCEPTION 'Logger % already in open logging session started the same year. Close this open session before starting new one', NEW.logger_id;
	
	ELSIF  bool_or(logging_session.active = TRUE)
		FROM loggers.logging_session
		WHERE logging_session.logger_id = NEW.logger_id
		THEN
		RAISE WARNING 'Logger % already in open logging session, started another year.', NEW.logger_id;
	END IF;


RETURN NEW;
END;
]]></definition>
</function>

<trigger name="tr_check_open_logging_session" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="loggers.startup">
		<function signature="functions.fn_check_logging_session_not_open()"/>
</trigger>

<function name="fn_start_new_logging_session"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
    INSERT INTO
       loggers.logging_session(session_id,logger_id)
        VALUES(new.session_id,new.logger_id);
           RETURN NULL;
END;
]]></definition>
</function>

<function name="fn_check_open_session_on_deployment"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
		IF bool_and(logging_session.logger_id != NEW.logger_id) 
			FROM loggers.logging_session
			THEN
			RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding deployment data', NEW.logger_id;
		END IF;
		IF bool_and(logging_session.active = FALSE)
			FROM loggers.logging_session
			WHERE logging_session.logger_id = NEW.logger_id
		THEN
		RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding deployment data', NEW.logger_id;
	END IF;
	NEW.session_id := logging_session.session_id
	FROM loggers.logging_session, loggers.startup
	WHERE NEW.logger_id = logging_session.logger_id
	AND logging_session.active = TRUE
	AND logging_session.session_id = startup.session_id
	AND date_part('year', startup.starttime_gmt) = date_part('year', NEW.deployment_date);
RETURN NEW;
END;
]]></definition>
</function>

<trigger name="tr_check_open_session_on_deployment" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="loggers.deployment">
		<function signature="functions.fn_check_open_session_on_deployment()"/>
</trigger>

<function name="fn_update_session_on_deployment"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	WITH col as (SELECT session_id, colony_int_name
		FROM loggers.deployment d, metadata.location l
		WHERE d.deployment_location = l.location_name
		AND d.session_id = NEW.session_id)
		UPDATE loggers.logging_session update SET
		deployment_id = NEW.deployment_id,
		colony = col.colony_int_name, 
		species = NEW.deployment_species,
		individ_id = NEW.individ_id
		FROM col
		WHERE update.session_id = NEW.session_id
		AND col.session_id = NEW.session_id;
	    IF NEW.deployment_location != a.intended_location
		FROM (SELECT a.intended_location 
		FROM loggers.allocation a
		WHERE a.session_id = NEW.session_id) a THEN
            RAISE WARNING '% deployment location does not match indended location in allocation table', NEW.deployment_location;
        END IF;
	RETURN NULL;
END;
]]></definition>
</function>

<trigger name="tr_update_session_on_deployment" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="loggers.deployment">
		<function signature="functions.fn_update_session_on_deployment()"/>
</trigger>

<function name="fn_check_open_session_on_retrieval"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	IF  bool_and(logging_session.logger_id != NEW.logger_id)
		FROM loggers.logging_session
	THEN 
		RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding deployment data', NEW.logger_id;
	END IF;
   
	IF bool_and(logging_session.active = FALSE) 			
		FROM loggers.logging_session
		WHERE logging_session.logger_id = NEW.logger_id
	THEN
		RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding deployment data', NEW.logger_id;
	END IF;
   
	IF bool_and(logging_session.deployment_id IS NULL)
			FROM loggers.logging_session
			WHERE logging_session.logger_id = NEW.logger_id
	THEN
		RAISE EXCEPTION 'Logger % not deployed. Logger must be deployed before retrieved.', NEW.logger_id;
	END IF;
		
	NEW.session_id := logging_session.session_id
	FROM loggers.logging_session
	WHERE NEW.logger_id = logging_session.logger_id
	AND logging_session.active = TRUE
	AND logging_session.individ_id = NEW.individ_id;
RETURN NEW;
END;
]]></definition>
</function>

<trigger name="tr_check_session_on_retrieval" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="loggers.retrieval">
		<function signature="functions.fn_check_open_session_on_retrieval()"/>
</trigger>

<function name="fn_update_session_on_retrieval"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
		WITH dep as (SELECT r.session_id, deployment_date, retrieval_date
		FROM loggers.retrieval r, loggers.deployment d
		WHERE r.session_id = d.session_id
		AND r.session_id = NEW.session_id)
		UPDATE loggers.logging_session update SET
		retrieval_id = NEW.retrieval_id,
		year_tracked = date_part('year', dep.deployment_date) || '_' || date_part('year', dep.retrieval_date)::integer % 100
		FROM dep
		WHERE update.session_id = NEW.session_id
		AND NEW.session_id = dep.session_id;
	RETURN NULL;
END;
]]></definition>
</function>

<trigger name="tr_update_session_on_retrieval" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="loggers.retrieval">
		<function signature="functions.fn_update_session_on_retrieval()"/>
</trigger>

<function name="fn_distribute_from_logger_import_table"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN

IF NEW.logger_serial_no || NEW.logger_model NOT IN (SELECT logger_serial_no || logger_model FROM loggers.logger_info)
	 THEN
	INSERT INTO loggers.logger_info
					(logger_serial_no,
					producer, 
					logger_model,
					production_year,
					project)
	VALUES(NEW.logger_serial_no,
					NEW.producer,
					NEW.logger_model,
					NEW.production_year,
					NEW.project);
	END IF;
	IF NEW.starttime_gmt IS NOT NULL AND NEW.shutdown_session IS NOT True THEN
	INSERT INTO loggers.startup 
					(session_id,
					logger_id,  
					starttime_gmt, 
					logging_mode, 
					started_by, 
					started_where, 
					days_delayed, 
					programmed_gmt_time)
	SELECT logger_info.logger_serial_no || '_' || NEW.starttime_gmt::date,
		logger_info.logger_id,  
		NEW.starttime_gmt, 
		NEW.logging_mode, 
		NEW.started_by, 
		NEW.started_where, 
		NEW.days_delayed, 
		NEW.programmed_gmt_time
	FROM loggers.logger_info 
	WHERE logger_info.logger_model = NEW.logger_model
	AND logger_info.logger_serial_no = NEW.logger_serial_no;
	END IF;
	IF NEW.intended_species IS NOT NULL THEN
	INSERT INTO loggers.allocation 
					(logger_id,
					intended_species,
					intended_location,
					intended_deployer,
					starttime_gmt)
	SELECT logger_info.logger_id,
		NEW.intended_species,
		NEW.intended_location,
		NEW.intended_deployer,
		NEW.starttime_gmt
		FROM loggers.logger_info 
	WHERE logger_info.logger_model = NEW.logger_model
	AND logger_info.logger_serial_no = NEW.logger_serial_no;
	END IF;
	IF NEW.shutdown_session IS True THEN
		
		IF NEW.logger_serial_no || NEW.logger_model IN (SELECT logger_serial_no || logger_model  FROM (SELECT ls.session_id, ls.logger_id, li.logger_serial_no, li.logger_model, ls.active
							FROM loggers.logging_session ls , loggers.logger_info li, loggers.startup
							WHERE li.logger_serial_no = NEW.logger_serial_no
							AND li.logger_model = NEW.logger_model
							AND li.logger_id = ls.logger_id
							AND active IS True
							AND ls.session_id = startup.session_id
							AND startup.starttime_gmt = NEW.starttime_gmt) foo) THEN
			INSERT INTO loggers.shutdown (session_id,
																download_type,
																download_date,
																field_status,
																downloaded_by,
																decomissioned,
																shutdown_date)
							SELECT ls.session_id,
								
										NEW.download_type,
										NEW.download_date,
										NEW.field_status,
										NEW.downloaded_by,
										NEW.decomissioned,
										NEW.shutdown_date
							FROM loggers.logger_info li, loggers.logging_session ls, loggers.startup
							WHERE li.logger_serial_no = NEW.logger_serial_no
							AND li.logger_model = NEW.logger_model
							AND li.logger_id = ls.logger_id
							AND ls.active IS True
							AND ls.session_id = startup.session_id
							AND startup.starttime_gmt = NEW.starttime_gmt;
		ELSE RAISE EXCEPTION 'Logger % of model % not in an open logging session started at %',  NEW.logger_serial_no, NEW.logger_model, NEW.starttime_gmt;
		END IF; 
	END IF;
RETURN NEW;
END;
]]></definition>
</function>

<function name="fn_check_open_session_on_allocation"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
		IF bool_and(logging_session.logger_id != NEW.logger_id) 
			FROM loggers.logging_session
			THEN
			RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding allocation data', NEW.logger_id;
		END IF;
		IF bool_and(logging_session.active = FALSE)
			FROM loggers.logging_session, loggers.startup
			WHERE logging_session.logger_id = NEW.logger_id
			AND logging_session.session_id = startup.session_id
			AND startup.starttime_gmt = NEW.starttime_gmt
		THEN
		RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding allocation data', NEW.logger_id;
	END IF;
	NEW.session_id := logging_session.session_id
	FROM loggers.logging_session, loggers.startup
	WHERE NEW.logger_id = logging_session.logger_id
	AND logging_session.active = TRUE
	AND logging_session.session_id = startup.session_id
	AND startup.starttime_gmt = NEW.starttime_gmt;
RETURN NEW;
END;
]]></definition>
</function>

<trigger name="tr_check_open_session_on_allocation" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="loggers.allocation">
		<function signature="functions.fn_check_open_session_on_allocation()"/>
</trigger>

<function name="fn_check_open_session_on_status"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
		IF bool_and(logging_session.logger_id != NEW.logger_id) 
			FROM loggers.logging_session
			THEN
			RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding status data', NEW.logger_id;
		END IF;
		IF bool_and(logging_session.active = FALSE)
			FROM loggers.logging_session
			WHERE logging_session.logger_id = NEW.logger_id
		THEN
		RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding status data', NEW.logger_id;
	END IF;
	NEW.session_id := logging_session.session_id
	FROM loggers.logging_session, individuals.individ_info
	WHERE NEW.logger_id = logging_session.logger_id
	AND logging_session.active = TRUE
	AND individ_info.individ_id = logging_session.individ_id
	AND NEW.ring_number = individ_info.ring_number
	AND NEW.euring_code = individ_info.euring_code;
RETURN NEW;
END;
]]></definition>
</function>

<trigger name="tr_check_open_session_on_status" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="individuals.individ_status">
		<function signature="functions.fn_check_open_session_on_status()"/>
</trigger>

<table name="breeding_stages">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="1374.49" y="508.5"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="breeding_stage" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="breeding_stages_pk" type="pk-constr" table="metadata.breeding_stages">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="breeding_stage_uq" type="uq-constr" table="metadata.breeding_stages">
		<columns names="breeding_stage" ref-type="src-columns"/>
	</constraint>
</table>

<function name="fn_delete_rows_from_import"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	DELETE FROM imports.logger_import 
	WHERE logger_import.id = NEW.id;
	RETURN NEW;
END;
]]></definition>
</function>

<view name="closed_sessions_not_shutdown">
	<schema name="views"/>
	<role name="admin"/>
	<position x="519.527" y="2732.55"/>
	<reference>
		<expression><![CDATA[ SELECT l.session_id,
    l.logger_id,
    l.year_tracked
   FROM (loggers.logging_session l
     LEFT JOIN loggers.shutdown s ON ((l.session_id = s.session_id)))
  WHERE (s.session_id IS NULL);]]></expression>
	</reference>
</view>

<table name="logger_files">
	<schema name="metadata"/>
	<role name="admin"/>
	<comment><![CDATA[Reference table that specifies what files are created by which logger model]]></comment>
	<position x="1693.12" y="508.5"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="logger_model" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="file_basename" not-null="true">
		<type name="text" length="0"/>
		<comment><![CDATA[base of filetype to be used as appendix on filename]]></comment>
	</column>
	<column name="logger_producer" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="logger_files_pk" type="pk-constr" table="metadata.logger_files">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<function name="fn_create_filenames_on_shutdown"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	IF (TG_OP = 'INSERT' AND (NEW.download_type = 'Successfully downloaded' 
									OR NEW.download_type = 'Reconstructed')) THEN
		WITH foo as (SELECT s.session_id, s.logger_id, l.logger_serial_no, l.logger_model, f.file_basename, EXTRACT(YEAR from r.retrieval_date) year_retr		
		FROM  loggers.logging_session s INNER JOIN loggers.logger_info l ON s.logger_id = l.logger_id
		INNER JOIN loggers.retrieval r ON r.session_id = s.session_id 
		INNER JOIN metadata.logger_files f ON l.logger_model = f.logger_model	)
		INSERT INTO loggers.file_archive (session_id, filename, file_basename)
		SELECT foo.session_id, logger_serial_no || '_' || foo.year_retr || '_' || foo.logger_model || foo.file_basename, foo.file_basename
		FROM foo
		WHERE foo.session_id = NEW.session_id;

--	ELSEIF (TG_OP = 'UPDATE' AND (NEW.download_type = 'Successfully downloaded'
--									OR NEW.download_type = 'Reconstructed')) THEN
--		WITH foo as (SELECT s.session_id, s.logger_id, l.logger_serial_no, l.logger_model, f.file_basename , EXTRACT(YEAR from r.retrieval_date) year_retr
--		FROM  loggers.logging_session s INNER JOIN loggers.logger_info l ON s.logger_id = l.logger_id
--		INNER JOIN loggers.retrieval r ON r.session_id = s.session_id 
--		INNER JOIN metadata.logger_files f ON l.logger_model = f.logger_model	)
--		UPDATE loggers.file_archive SET
--		filename = foo.logger_serial_no || '_' || foo.year_retr || '_' || foo.logger_model || foo.file_basename
--		FROM foo
--		WHERE NEW.session_id = file_archive.session_id
--		AND foo.file_basename = file_archive.file_basename;
	ELSEIF (TG_OP = 'DELETE') THEN
	DELETE FROM loggers.file_archive WHERE session_id = OLD.session_id;
	END IF;
RETURN NULL;
END;
]]></definition>
</function>

<trigger name="tr_create_filenames_on_shutdown" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="loggers.shutdown">
		<function signature="functions.fn_create_filenames_on_shutdown()"/>
</trigger>

<index name="logging_session_session_id_idx" table="loggers.logging_session"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="session_id"/>
		</idxelement>
</index>

<index name="logging_session_logger_id_idx" table="loggers.logging_session"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="logger_id"/>
		</idxelement>
</index>

<index name="ls_active_idx" table="loggers.logging_session"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="active"/>
		</idxelement>
</index>

<index name="ls_colony_idx" table="loggers.logging_session"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="colony"/>
		</idxelement>
</index>

<index name="ls_species_idx" table="loggers.logging_session"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="species"/>
		</idxelement>
</index>

<index name="ls_year_tracked_idx" table="loggers.logging_session"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="year_tracked"/>
		</idxelement>
</index>

<index name="ls_individ_idx" table="loggers.logging_session"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="individ_id"/>
		</idxelement>
</index>

<table name="retrieval_type">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="304.827" y="695.75"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="type" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="retrieval_type_pk" type="pk-constr" table="metadata.retrieval_type">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="retrieval_type_uq" type="uq-constr" table="metadata.retrieval_type">
		<columns names="type" ref-type="src-columns"/>
	</constraint>
</table>

<table name="download_types">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="608.457" y="695.75"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="download_type" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="download_types_pk" type="pk-constr" table="metadata.download_types">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="download_type_uq" type="uq-constr" table="metadata.download_types">
		<columns names="download_type" ref-type="src-columns"/>
	</constraint>
</table>

<table name="breeding_success_criterion">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="927.087" y="695.75"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="breeding_success_criterion" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="breeding_success_criterion_pk" type="pk-constr" table="metadata.breeding_success_criterion">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="breeding_success_criterion_uq" type="uq-constr" table="metadata.breeding_success_criterion">
		<columns names="breeding_success_criterion" ref-type="src-columns"/>
	</constraint>
</table>

<function name="reject_process_colony_not_matching_any_type_name"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	IF NEW.colony NOT IN (SELECT DISTINCT x 
FROM metadata.location CROSS JOIN LATERAL
	(values(colony_int_name), (colony_nat_name)) as t(x)
WHERE x IS NOT NULL) THEN
RAISE EXCEPTION 'Colony name not present as native or international name in metadatal.locations table', NEW.colony;
END IF;
RETURN NEW;
END;
]]></definition>
</function>

<trigger name="tr_before_insert_or_update_process_check_colony_name" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="positions.processing">
		<function signature="functions.reject_process_colony_not_matching_any_type_name()"/>
</trigger>

<function name="fn_update_individ_info_logging_session"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN	
	UPDATE individuals.individ_status 
	SET session_id= foo.session_id
	FROM (SELECT s.session_id
				FROM loggers.logging_session s
				WHERE s.logger_id = NEW.logger_id
				AND s.active IS True) foo
	
	WHERE id=NEW.id;
    RETURN NULL; -- result is ignored since this is an AFTER trigger
  END;
]]></definition>
</function>

<trigger name="tr_update_individ_info_logging_session_on_insert_or_update" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="individuals.individ_status">
		<function signature="functions.fn_update_individ_info_logging_session()"/>
</trigger>

<table name="metadata_import">
	<schema name="imports"/>
	<role name="admin"/>
	<position x="1638.93" y="2732.55"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="date">
		<type name="date" length="0"/>
	</column>
	<column name="ring_number" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="euring_code" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="color_ring">
		<type name="text" length="0"/>
	</column>
	<column name="logger_status">
		<type name="text" length="0"/>
	</column>
	<column name="logger_model_retrieved">
		<type name="text" length="0"/>
	</column>
	<column name="logger_id_retrieved">
		<type name="text" length="0"/>
	</column>
	<column name="logger_model_deployed">
		<type name="text" length="0"/>
	</column>
	<column name="logger_id_deployed">
		<type name="text" length="0"/>
	</column>
	<column name="species">
		<type name="text" length="0"/>
	</column>
	<column name="morph">
		<type name="text" length="0"/>
	</column>
	<column name="subspecies">
		<type name="text" length="0"/>
	</column>
	<column name="age">
		<type name="text" length="0"/>
	</column>
	<column name="sex">
		<type name="text" length="0"/>
	</column>
	<column name="sexing_method">
		<type name="text" length="0"/>
	</column>
	<column name="weight">
		<type name="double precision" length="0"/>
	</column>
	<column name="scull">
		<type name="double precision" length="0"/>
	</column>
	<column name="tarsus">
		<type name="double precision" length="0"/>
	</column>
	<column name="wing">
		<type name="double precision" length="0"/>
	</column>
	<column name="breeding_stage">
		<type name="text" length="0"/>
	</column>
	<column name="eggs">
		<type name="smallint" length="0"/>
	</column>
	<column name="chicks">
		<type name="smallint" length="0"/>
	</column>
	<column name="hatching_success">
		<type name="boolean" length="0"/>
	</column>
	<column name="breeding_success">
		<type name="boolean" length="0"/>
	</column>
	<column name="breeding_success_criterion">
		<type name="text" length="0"/>
	</column>
	<column name="country">
		<type name="text" length="0"/>
	</column>
	<column name="colony">
		<type name="text" length="0"/>
	</column>
	<column name="colony_latitude">
		<type name="double precision" length="0"/>
	</column>
	<column name="colony_longitude">
		<type name="double precision" length="0"/>
	</column>
	<column name="nest_id">
		<type name="text" length="0"/>
	</column>
	<column name="blood_sample">
		<type name="text" length="0"/>
	</column>
	<column name="feather_sample">
		<type name="text" length="0"/>
	</column>
	<column name="other_samples">
		<type name="text" length="0"/>
	</column>
	<column name="data_responsible" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="back_on_nest">
		<type name="boolean" length="0"/>
	</column>
	<column name="logger_mount_method">
		<type name="text" length="0"/>
	</column>
	<column name="comment">
		<type name="text" length="0"/>
	</column>
	<column name="other">
		<type name="text" length="0"/>
	</column>
	<column name="old_ring_number">
		<type name="text" length="0"/>
	</column>
	<column name="last_updated">
		<type name="timestamp" length="0"/>
	</column>
	<column name="updated_by">
		<type name="text" length="0"/>
	</column>
</table>

<table name="euring_codes">
	<schema name="metadata"/>
	<role name="admin"/>
	<position x="1302.72" y="695.75"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="euring_code" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="euring_codes_pk" type="pk-constr" table="metadata.euring_codes">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<function name="fn_distribute_from_metadata_table"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
IF NEW.ring_number || NEW.euring_code NOT IN (SELECT ring_number || euring_code FROM individuals.individ_info) AND NEW.logger_model_deployed IS NOT NULL THEN
INSERT INTO individuals.individ_info (ring_number,
															euring_code,
															species,
															color_ring,
															morph,
															subspecies,
															age,
															sex,
															sexing_method,
															latest_info_date,
															data_responsible)		
					VALUES(NEW.ring_number,
									NEW.euring_code,
									NEW.species,
									NEW.color_ring,
									NEW.morph,
									NEW.subspecies,
									NEW.age,
									NEW.sex,
									NEW.sexing_method,
									NEW."date",
									NEW.data_responsible);
END IF;
	IF NEW.logger_model_deployed IS NOT NULL THEN
	INSERT INTO loggers.deployment
				(logger_id,
				individ_id,
				deployment_species,
				deployment_location,
				deployment_date,
				logger_mount_method)
	SELECT logging_session.logger_id,
				individ_info.individ_id,
				NEW.species,
				NEW.colony,
				NEW.date,
				NEW.logger_mount_method
FROM loggers.logging_session, loggers.logger_info, individuals.individ_info, loggers.startup
WHERE logging_session.logger_id = logger_info.logger_id
AND logger_info.logger_model = NEW.logger_model_deployed
AND logger_info.logger_serial_no = NEW.logger_id_deployed
AND logging_session.active IS True
AND individ_info.ring_number = NEW.ring_number
AND individ_info.euring_code = NEW.euring_code
AND logging_session.session_id =  startup.session_id
AND date_part('year', NEW.date) = date_part('year', startup.starttime_gmt);
	END IF;
/* Removed. No need to overwrite status based on date? changed because we need a new session to appear in the status table when the bird is deployed in a new session at the same date as it was retrieved
IF NEW.date IN (SELECT individ_status.status_date
						FROM loggers.logging_session, individuals.individ_info, individuals.individ_status 
						WHERE individ_info.ring_number = NEW.ring_number
						AND individ_info.euring_code = NEW.euring_code
						AND individ_info.individ_id = logging_session.individ_id
						AND logging_session.active Is True
						AND logging_session.session_id = individ_status.session_id) 
THEN
	UPDATE individuals.individ_status
	SET 			weight = NEW.weight,
					scull = NEW.scull,
					tarsus = NEW.tarsus,
					wing = NEW.wing, 
					breeding_stage = NEW.breeding_stage,
					eggs = NEW.eggs,
					chicks = NEW.chicks, 
					hatching_success = NEW.hatching_success,
					breeding_success = NEW.breeding_success,
					breeding_success_criterion = NEW.breeding_success_criterion,
					data_responsible = NEW.data_responsible,
					back_on_nest = NEW.back_on_nest,
					"comment" = NEW."comment",
					"location" = NEW.colony,
						ring_number = NEW.ring_number,
						euring_code = NEW.euring_code,
						species = NEW.species, 
						color_ring = NEW.color_ring,
						morph = NEW.morph,
						subspecies = NEW.subspecies,
						age = NEW.age,
						sex = NEW.sex,
						sexing_method = NEW.sexing_method
		FROM loggers.logging_session, individuals.individ_info
		WHERE individ_status.logger_id = logging_session.logger_id
		AND status_date = NEW.date
		AND  individ_status.session_id = logging_session.session_id
		AND individ_info.ring_number = NEW.ring_number
		AND individ_info.euring_code = NEW.euring_code
		AND individ_info.individ_id = logging_session.individ_id
		AND logging_session.active Is True;
	
ELSE 
*/
	INSERT INTO individuals.individ_status	(logger_id,
					"status_date",
					session_id,
					weight,
					scull,
					tarsus,
					wing,
					breeding_stage,
					eggs,
					chicks,
					hatching_success,
					breeding_success,
					breeding_success_criterion,
					data_responsible,
					back_on_nest,
					"comment",
					"location",
						ring_number,
						euring_code,
						species,
						color_ring,
						morph,
						subspecies,
						age,
						sex,
						sexing_method)
	SELECT logging_session.logger_id,
					NEW.date,
					logging_session.session_id,
					NEW.weight,
					NEW.scull,
					NEW.tarsus,
					NEW.wing,
					NEW.breeding_stage,
					NEW.eggs,
					NEW.chicks,
					NEW.hatching_success,
					NEW.breeding_success,
					NEW.breeding_success_criterion,
					NEW.data_responsible,
					NEW.back_on_nest,
					NEW."comment",
					NEW.colony,
						NEW.ring_number,
						NEW.euring_code,
						NEW.species,
						NEW.color_ring,
						NEW.morph,
						NEW.subspecies,
						NEW.age,
						NEW.sex,
						NEW.sexing_method
				FROM loggers.logging_session, individuals.individ_info
				WHERE individ_info.ring_number = NEW.ring_number
				AND individ_info.euring_code = NEW.euring_code
				AND individ_info.individ_id = logging_session.individ_id
				AND logging_session.active Is True;
--END IF;
	
	
IF NEW.logger_model_retrieved IS NOT NULL THEN
		INSERT INTO loggers.retrieval
					(logger_id,
					individ_id,
					retrieval_type,
					retrieval_location,
					retrieval_date)
		SELECT logging_session.logger_id,
					individ_info.individ_id,
					NEW.logger_status,
					NEW.colony,
					NEW.date
FROM loggers.logging_session, loggers.logger_info, individuals.individ_info
WHERE logging_session.logger_id = logger_info.logger_id
AND logger_info.logger_model = NEW.logger_model_retrieved
AND logger_info.logger_serial_no = NEW.logger_id_retrieved
AND logging_session.active IS True
AND individ_info.ring_number = NEW.ring_number
AND individ_info.euring_code = NEW.euring_code
AND logging_session.individ_id =  individ_info.individ_id
;
END IF;
NEW.updated_by := current_user;
NEW.last_updated := now();
RETURN NEW;
END;
]]></definition>
</function>

<function name="fn_deleted_uuid"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
    INSERT INTO
        positions.deleted_uuid(id, import_date, deleted_date, posdata_file, user_name)
        VALUES(old.id,old.import_date, CURRENT_DATE, old.posdata_file, user);
           RETURN OLD;
END;
]]></definition>
</function>

<function name="fn_update_data_version"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
  NEW.data_version := OLD.data_version + 1;
  RETURN NEW;
END; 
]]></definition>
</function>

<function name="fn_update_import_date"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
  NEW.import_date := CURRENT_DATE;
  RETURN NEW;
END; 
]]></definition>
</function>

<function name="fn_used_uuid"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
    INSERT INTO
        positions.used_uuid(id, import_date,posdata_file, user_name)
        VALUES(new.id,new.import_date, new.posdata_file, user);
           RETURN new;
END;
]]></definition>
</function>

<table name="deleted_uuid">
	<schema name="positions"/>
	<role name="admin"/>
	<position x="2661.08" y="1008.05"/>
	<column name="id" not-null="true">
		<type name="uuid" length="0"/>
	</column>
	<column name="import_date">
		<type name="date" length="0"/>
	</column>
	<column name="deleted_date">
		<type name="date" length="0"/>
	</column>
	<column name="posdata_file">
		<type name="text" length="0"/>
	</column>
	<column name="user_name">
		<type name="text" length="0"/>
	</column>
	<constraint name="deleted_uuid_pk" type="pk-constr" table="positions.deleted_uuid">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="used_uuid">
	<schema name="positions"/>
	<role name="admin"/>
	<position x="2959.81" y="1008.05"/>
	<column name="id" not-null="true">
		<type name="uuid" length="0"/>
	</column>
	<column name="import_date">
		<type name="date" length="0"/>
	</column>
	<column name="posdata_file">
		<type name="text" length="0"/>
	</column>
	<column name="user_name">
		<type name="text" length="0"/>
	</column>
	<constraint name="used_uuid_pk" type="pk-constr" table="positions.used_uuid">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<trigger name="tr_deleted_uuid_trigger" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="positions.postable">
		<function signature="functions.fn_deleted_uuid()"/>
</trigger>

<trigger name="tr_update_import_date" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="positions.postable">
		<function signature="functions.fn_update_import_date()"/>
</trigger>

<trigger name="tr_used_uuid" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="positions.postable">
		<function signature="functions.fn_used_uuid()"/>
</trigger>

<trigger name="tr_distribute_on_metadata_import" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="imports.metadata_import">
		<function signature="functions.fn_distribute_from_metadata_table()"/>
</trigger>

<index name="postable_datarespons_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="data_responsible"/>
		</idxelement>
</index>

<index name="postable_datetime_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="date_time"/>
		</idxelement>
</index>

<index name="postable_eqfilter3_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="eqfilter3"/>
		</idxelement>
</index>

<index name="postable_id_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="id"/>
		</idxelement>
</index>

<index name="postable_postdatafile_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="posdata_file"/>
		</idxelement>
</index>

<index name="postable_species_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="species"/>
		</idxelement>
</index>

<index name="postable_ring_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="ring_number"/>
		</idxelement>
</index>

<index name="postable_logger_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="logger_id"/>
		</idxelement>
</index>

<function name="fn_check_open_session_on_metadata_deployment"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
		IF COALESCE(bool_and(logging_session.logger_id != logger_info.logger_id), False) 
			FROM loggers.logging_session, loggers.logger_info
			WHERE logger_info.logger_model = NEW.logger_model_deployed
			AND logger_info.logger_serial_no = NEW.logger_id_deployed
		THEN
			RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding deployment data.', NEW.logger_id_deployed;
		END IF;
		IF COALESCE(bool_and(logging_session.active IS NOT True), False)
			FROM loggers.logging_session, loggers.logger_info
			WHERE logging_session.logger_id = logger_info.logger_id
			AND logger_info.logger_model = NEW.logger_model_deployed
			AND logger_info.logger_serial_no = NEW.logger_id_deployed
		THEN
		RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding deployment data.', NEW.logger_id_deployed;
	END IF;

		IF COALESCE(NOT bool_or(date_part('year', startup.starttime_gmt) = date_part('year', NEW.date)), False)
			FROM loggers.logging_session, loggers.logger_info, loggers.startup
			WHERE logging_session.logger_id = logger_info.logger_id
			AND logging_session.session_id = startup.session_id
			AND logger_info.logger_model = NEW.logger_model_deployed
			AND logger_info.logger_serial_no = NEW.logger_id_deployed
		THEN RAISE EXCEPTION 'Logger % not started up in the year it was deployed. Make sure startup year matches the deployement year.', NEW.logger_id_deployed;
	END IF;
RETURN NEW;
END;
]]></definition>
</function>

<trigger name="tr_check_open_session_on_metadata_deployment" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="imports.metadata_import">
		<function signature="functions.fn_check_open_session_on_metadata_deployment()"/>
</trigger>

<function name="fn_check_open_session_on_metadata_retrieval"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	IF  bool_and(logging_session.logger_id != logger_info.logger_id)
			FROM loggers.logging_session, loggers.logger_info
			WHERE logger_info.logger_model = NEW.logger_model_retrieved
			AND logger_info.logger_serial_no = NEW.logger_id_retrieved
	THEN 
		RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding deployment data', NEW.logger_id_retrieved;
	END IF;
   
	IF bool_and(logging_session.active IS NOT True)			
			FROM loggers.logging_session, loggers.logger_info
			WHERE logging_session.logger_id = logger_info.logger_id
			AND logger_info.logger_model = NEW.logger_model_retrieved
			AND logger_info.logger_serial_no = NEW.logger_id_retrieved
	THEN
		RAISE EXCEPTION 'Logger % not in open logging session. Open session before adding deployment data', NEW.logger_id_retrieved;
	END IF;
   
	IF bool_and(logging_session.deployment_id IS NULL)
			FROM loggers.logging_session, loggers.logger_info
			WHERE logging_session.logger_id = logger_info.logger_id
			AND logger_info.logger_model = NEW.logger_model_retrieved
			AND logger_info.logger_serial_no = NEW.logger_id_retrieved
	THEN
		RAISE EXCEPTION 'Logger % not deployed. Logger must be deployed before retrieved.', NEW.logger_id_retrieved;
	END IF;
RETURN NEW;
END;
]]></definition>
</function>

<trigger name="tr_check_open_session_on_metadata_retrieval" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="imports.metadata_import">
		<function signature="functions.fn_check_open_session_on_metadata_retrieval()"/>
</trigger>

<function name="fn_update_materialized_views_on_postable_update"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1000"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
REFRESH MATERIALIZED VIEW views.categories;
REFRESH MATERIALIZED VIEW views.longersum;
REFRESH MATERIALIZED VIEW views.shorttable;
REFRESH MATERIALIZED VIEW views.shorttableeqfilter3;
RETURN NULL;
END;
]]></definition>
</function>

<view name="all_depl_mismatch">
	<schema name="views"/>
	<role name="postgres"/>
	<position x="810.228" y="2732.55"/>
	<reference>
		<expression><![CDATA[ SELECT a.session_id,
    a.logger_id,
    a.intended_species,
    a.intended_location,
    a.intended_deployer,
    d.deployment_species,
    d.deployment_location,
    d.deployment_date
   FROM (loggers.allocation a
     JOIN loggers.deployment d ON ((a.session_id = d.session_id)))
  WHERE (a.intended_location <> d.deployment_location);]]></expression>
	</reference>
</view>

<function name="fn_update_individ_info_from_individ_status"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	
	IF NEW.ring_number || NEW.euring_code IN (SELECT ring_number || euring_code FROM individuals.individ_info) THEN
		IF NEW.species != (SELECT(foo.species)
		FROM (SELECT species, ring_number, euring_code FROM individuals.individ_info) foo
		WHERE NEW.ring_number = foo.ring_number
		AND NEW.euring_code = foo.euring_code) THEN
		RAISE EXCEPTION 'Species id for metalring number % does not match old species', NEW.ring_number;
		END IF;
		UPDATE individuals.individ_info
		SET latest_info_date = NEW.status_date,
		status_id = NEW.status_id,
		data_responsible = NEW.data_responsible
		WHERE ring_number = NEW.ring_number
		AND euring_code = NEW.euring_code; 
		IF NEW.color_ring IS NOT NULL THEN
			UPDATE individuals.individ_info
				SET color_ring = NEW.color_ring
				WHERE ring_number = NEW.ring_number
				AND euring_code = NEW.euring_code;
		END IF;
		IF NEW.morph IS NOT NULL THEN
			UPDATE individuals.individ_info
				SET morph = NEW.morph
				WHERE ring_number = NEW.ring_number
				AND euring_code = NEW.euring_code;
		END IF;
		IF NEW.subspecies IS NOT NULL THEN
			UPDATE individuals.individ_info
				SET subspecies = NEW.subspecies
				WHERE ring_number = NEW.ring_number
				AND euring_code = NEW.euring_code;
		END IF;
		IF NEW.age IS NOT NULL THEN
			UPDATE individuals.individ_info
				SET age = NEW.age
				WHERE ring_number = NEW.ring_number
				AND euring_code = NEW.euring_code;
		END IF;
		IF NEW.sex IS NOT NULL THEN
			UPDATE individuals.individ_info
				SET sex = NEW.sex,
				sexing_method = NEW.sexing_method
				WHERE ring_number = NEW.ring_number
				AND euring_code = NEW.euring_code;
		END IF;
	END IF;
RETURN NEW;
END;
]]></definition>
</function>

<trigger name="tr_update_individ_info_from_individ_status" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="individuals.individ_status">
		<function signature="functions.fn_update_individ_info_from_individ_status()"/>
</trigger>

<function name="fn_check_retrieval_match_with_deployment"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	IF NEW.individ_id != d.individ_id 
	FROM loggers.deployment d
	WHERE NEW.session_id = d.session_id THEN
	RAISE EXCEPTION 'Retrieved individual % does not match deployed individual ', NEW.individ_id;
	END IF;
RETURN NULL;
END;
]]></definition>
</function>

<trigger name="tr_check_mismatch_with_deployment" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="loggers.retrieval">
		<function signature="functions.fn_check_retrieval_match_with_deployment()"/>
</trigger>

<function name="fn_update_session_on_shutdown"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	UPDATE loggers.logging_session
	SET active = 'False'
	WHERE session_id = NEW.session_id;
	RETURN NULL;
END;
]]></definition>
</function>

<trigger name="tr_update_session_on_shutdown" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="loggers.shutdown">
		<function signature="functions.fn_update_session_on_shutdown()"/>
</trigger>

<function name="fn_check_shutdown_after_startup"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	IF NEW.download_date < (SELECT starttime_gmt::date
				FROM loggers.startup
				WHERE NEW.session_id = startup.session_id) THEN
				SELECT raise_logger_session_exception(logger_serial_no, session_id)
				FROM (SELECT starttime_gmt::date, logger_info.logger_serial_no, logging_session.session_id 
				FROM loggers.startup, loggers.logger_info, loggers.logging_session
				WHERE NEW.session_id = logging_session.session_id
				AND logging_session.logger_id = logger_info.logger_id) fo;
	
	END IF;
	RETURN NULL;
END;
]]></definition>
</function>

<function name="fn_check_retr_after_depl"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	IF NEW.retrieval_date < (SELECT deployment_date
				FROM loggers.deployment
				WHERE NEW.session_id = deployment.session_id) THEN
				SELECT functions.fn_raise_download_date_exception(logger_serial_no, session_id)
				FROM (SELECT logger_info.logger_serial_no, logging_session.session_id 
				FROM loggers.logger_info, loggers.logging_session
				WHERE NEW.session_id = logging_session.session_id
				AND logging_session.logger_id = logger_info.logger_id) fo;
	
	END IF;
	RETURN NULL;
END;
]]></definition>
</function>

<trigger name="tr_check_retr_after_depl" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="loggers.retrieval">
		<function signature="functions.fn_check_retr_after_depl()"/>
</trigger>

<function name="fn_check_depl_after_startup"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	IF (
	(NEW.deployment_date < (SELECT programmed_gmt_time::date
				FROM loggers.startup
				WHERE NEW.session_id = startup.session_id)) 
				OR
				
	(NEW.deployment_date < (SELECT starttime_gmt::date
				FROM loggers.startup
				WHERE NEW.session_id = startup.session_id) 
				AND
				
				(SELECT programmed_gmt_time::date
				FROM loggers.startup
				WHERE NEW.session_id = startup.session_id) IS NULL)
				) 
				THEN
				
				SELECT functions.fn_raise_deployment_date_exception(logger_serial_no, session_id)
				FROM (SELECT logger_info.logger_serial_no, logging_session.session_id 
				FROM loggers.startup, loggers.logger_info, loggers.logging_session
				WHERE NEW.session_id = logging_session.session_id
				AND logging_session.logger_id = logger_info.logger_id) fo;
	
	END IF;
	RETURN NULL;
END;
]]></definition>
</function>

<trigger name="tr_check_depl_after_startup" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="loggers.deployment">
		<function signature="functions.fn_check_depl_after_startup()"/>
</trigger>

<function name="fn_raise_download_date_exception"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void" length="1"/>
	</return-type>
	<parameter name="logger_id">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="session_id">
		<type name="integer" length="0"/>
	</parameter>
	<definition><![CDATA[
BEGIN
  RAISE EXCEPTION 'Download date of logger % in session % is earlier than startup date', $1, $2;
END;
]]></definition>
</function>

<function name="fn_raise_deployment_date_exception"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void" length="1"/>
	</return-type>
	<parameter name="logger_id">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="session_id">
		<type name="integer" length="0"/>
	</parameter>
	<definition><![CDATA[
BEGIN
  RAISE EXCEPTION 'Deployment date of logger % in session % is earlier than startup date', $1, $2;
END;
]]></definition>
</function>

<function name="fn_record_metadata_last_updated"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
	NEW.updated_by := current_user;
	NEW.last_updated := now();

RETURN NEW;
END;
]]></definition>
</function>

<function name="fn_record_logging_session_last_updated"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
NEW.last_updated := now();
NEW.updated_by := current_user;
RETURN NEW;
END;
]]></definition>
</function>

<trigger name="tr_update_session_last_modified" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="loggers.logging_session">
		<function signature="functions.fn_record_logging_session_last_updated()"/>
</trigger>

<index name="postable_logger_model" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="logger_model"/>
		</idxelement>
</index>

<function name="fn_update_postable_logging_session"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
UPDATE positions.postable pos
SET session_id = ls.session_id
FROM loggers.logging_session ls, loggers.logger_info li
WHERE pos.logger_id = li.logger_serial_no
AND pos.logger_model = li.logger_model
AND li.logger_id = ls.logger_id
AND pos.year_deployed || '_' || substr(pos.year_retrieved::text,3, 4) = ls.year_tracked
;
RETURN NULL;
END;
]]></definition>
</function>

<schema name="seatrack" rect-visible="true" fill-color="#4e132e">
	<role name="admin"/>
</schema>

<table name="postable">
	<schema name="seatrack"/>
	<role name="seatrack_admin"/>
	<position x="2144.06" y="2732.55"/>
	<column name="id" not-null="true" default-value="uuid_generate_v4()">
		<type name="uuid" length="0"/>
	</column>
	<column name="date_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="logger">
		<type name="character varying" length="50"/>
	</column>
	<column name="logger_id">
		<type name="character varying" length="50"/>
	</column>
	<column name="logger_model">
		<type name="character varying" length="20"/>
	</column>
	<column name="year_tracked">
		<type name="character varying" length="20"/>
	</column>
	<column name="year_deployed">
		<type name="integer" length="0"/>
	</column>
	<column name="year_retrieved">
		<type name="integer" length="0"/>
	</column>
	<column name="ring_number">
		<type name="character varying" length="50"/>
	</column>
	<column name="euring_code">
		<type name="character varying" length="20"/>
	</column>
	<column name="species">
		<type name="character varying" length="80"/>
	</column>
	<column name="colony">
		<type name="character varying" length="50"/>
	</column>
	<column name="lon_raw">
		<type name="double precision" length="0"/>
	</column>
	<column name="lat_raw">
		<type name="double precision" length="0"/>
	</column>
	<column name="lon_smooth1">
		<type name="double precision" length="0"/>
	</column>
	<column name="lat_smooth1">
		<type name="double precision" length="0"/>
	</column>
	<column name="lon_smooth2">
		<type name="double precision" length="0"/>
	</column>
	<column name="lat_smooth2">
		<type name="double precision" length="0"/>
	</column>
	<column name="disttocol_s2">
		<type name="double precision" length="0"/>
	</column>
	<column name="eqfilter1">
		<type name="smallint" length="0"/>
	</column>
	<column name="eqfilter2">
		<type name="smallint" length="0"/>
	</column>
	<column name="eqfilter3">
		<type name="smallint" length="0"/>
	</column>
	<column name="lat_smooth2_eqfilt3">
		<type name="double precision" length="0"/>
	</column>
	<column name="sex">
		<type name="character varying" length="8"/>
	</column>
	<column name="morph">
		<type name="character varying" length="20"/>
	</column>
	<column name="subspecies">
		<type name="character varying" length="50"/>
	</column>
	<column name="age">
		<type name="character varying" length="20"/>
	</column>
	<column name="col_lon">
		<type name="double precision" length="0"/>
	</column>
	<column name="col_lat">
		<type name="double precision" length="0"/>
	</column>
	<column name="tfirst">
		<type name="timestamp" length="0"/>
	</column>
	<column name="tsecond">
		<type name="timestamp" length="0"/>
	</column>
	<column name="twl_type">
		<type name="smallint" length="0"/>
	</column>
	<column name="conf">
		<type name="smallint" length="0"/>
	</column>
	<column name="sun">
		<type name="double precision" length="0"/>
	</column>
	<column name="software">
		<type name="character varying" length="50"/>
	</column>
	<column name="light_threshold">
		<type name="integer" length="0"/>
	</column>
	<column name="analyzer">
		<type name="character varying" length="50"/>
	</column>
	<column name="data_responsible">
		<type name="character varying" length="50"/>
	</column>
	<column name="logger_yeartracked">
		<type name="character varying" length="50"/>
	</column>
	<column name="posdata_file">
		<type name="character varying" length="50"/>
	</column>
	<column name="import_date">
		<type name="date" length="0"/>
	</column>
	<column name="data_version" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="database_version" default-value="2">
		<type name="integer" length="0"/>
	</column>
	<column name="session_id">
		<type name="integer" length="0"/>
	</column>
	<constraint name="postable_pkey" type="pk-constr" table="seatrack.postable">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<schema name="restricted" rect-visible="true" fill-color="#081cb1">
	<role name="admin"/>
</schema>

<sequence name="write_id_seq" cycle="false" start="1" increment="1" min-value="1" max-value="9223372036854775807" cache="1">
	<schema name="restricted"/>
	<role name="admin"/>
</sequence>

<table name="write">
	<schema name="restricted"/>
	<role name="admin"/>
	<position x="50" y="3625.8"/>
	<column name="id" not-null="true" sequence="restricted.write_id_seq">
		<type name="integer" length="0"/>
	</column>
	<column name="name">
		<type name="text" length="0"/>
	</column>
	<column name="pwd">
		<type name="text" length="0"/>
	</column>
	<constraint name="write_pkey" type="pk-constr" table="restricted.write">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="read_id_seq" cycle="false" start="1" increment="1" min-value="1" max-value="9223372036854775807" cache="1">
	<schema name="restricted"/>
	<role name="seatrack_admin"/>
</sequence>

<table name="read">
	<schema name="restricted"/>
	<role name="seatrack_admin"/>
	<position x="316.73" y="3625.8"/>
	<column name="id" not-null="true" sequence="restricted.read_id_seq">
		<type name="integer" length="0"/>
	</column>
	<column name="name">
		<type name="text" length="0"/>
	</column>
	<column name="pwd">
		<type name="text" length="0"/>
	</column>
	<constraint name="read_pkey" type="pk-constr" table="restricted.read">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<trigger name="tr_record_metadata_last_updated" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="imports.metadata_import">
		<function signature="functions.fn_record_metadata_last_updated()"/>
</trigger>

<index name="postable_session_id_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="session_id"/>
		</idxelement>
</index>

<index name="postable_year_tracked_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="year_tracked"/>
		</idxelement>
</index>

<function name="fn_delete_individ_info_on_delete_individ_status"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="seatrack_admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN

DELETE FROM individuals.individ_info ii
WHERE ii.ring_number IN (SELECT individ_info.ring_number
FROM individuals.individ_info LEFT OUTER JOIN
individuals.individ_status
ON (individ_info.ring_number = individ_status.ring_number
AND individ_info.euring_code = individ_status.euring_code)
WHERE individ_status.ring_number IS NULL
);

RETURN NULL;
END;
]]></definition>
</function>

<trigger name="tr_insert_new_logging_session" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="loggers.startup">
		<function signature="functions.fn_start_new_logging_session()"/>
</trigger>

<extension name="pgcrypto" cur-version="1.3">
	<schema name="public"/>
	<comment><![CDATA[cryptographic functions]]></comment>
</extension>

<view name="users">
	<schema name="public"/>
	<role name="seatrack_admin"/>
	<position x="50" y="50"/>
	<reference>
		<expression><![CDATA[ SELECT DISTINCT ON (foo.username) (foo.username)::text AS "User",
    ((foo.username)::text || (foo.username)::text) AS "Password",
    (foo.username)::character varying AS "Uid",
        CASE
            WHEN (foo.groups ~~ '%writer'::text) THEN 'write'::character varying
            WHEN (foo.groups ~~ 'admin'::text) THEN 'write'::character varying
            ELSE 'read'::character varying
        END AS "Gid",
    '/data/local/ftp'::text AS "Dir"
   FROM ( SELECT pg_authid.rolname AS username,
            pg_roles.rolname AS groups,
            pg_authid.rolpassword
           FROM (((pg_user
             JOIN pg_auth_members ON ((pg_user.usesysid = pg_auth_members.member)))
             JOIN pg_roles ON ((pg_roles.oid = pg_auth_members.roleid)))
             JOIN pg_authid ON ((pg_user.usename = pg_authid.rolname)))
          WHERE (pg_authid.rolcanlogin IS TRUE)) foo
  ORDER BY foo.username;]]></expression>
	</reference>
</view>

<view name="users">
	<schema name="restricted"/>
	<role name="seatrack_admin"/>
	<position x="579.46" y="3625.8"/>
	<reference>
		<expression><![CDATA[ SELECT 'test'::text AS "User",
    'test'::text AS "Password",
    1003 AS "Uid",
    1003 AS "Gid",
    '/data/local/ftp'::text AS "Dir";]]></expression>
	</reference>
</view>

<view name="ftp_credentials">
	<schema name="restricted"/>
	<role name="seatrack_admin"/>
	<position x="803.287" y="3625.8"/>
	<reference>
		<expression><![CDATA[ SELECT DISTINCT ON (foo.username) (foo.username)::text AS "User",
    "right"(foo.rolpassword, '-3'::integer) AS "Password",
        CASE
            WHEN (foo.groups ~~ '%writer'::text) THEN 1003
            WHEN (foo.groups ~~ 'admin'::text) THEN 1003
            ELSE 1005
        END AS "Uid",
        CASE
            WHEN (foo.groups ~~ '%writer'::text) THEN 1003
            WHEN (foo.groups ~~ 'admin'::text) THEN 1003
            ELSE 1005
        END AS "Gid",
    '/data/local/ftp'::text AS "Dir"
   FROM ( SELECT pg_authid.rolname AS username,
            pg_roles.rolname AS groups,
            pg_authid.rolpassword
           FROM (((pg_user
             JOIN pg_auth_members ON ((pg_user.usesysid = pg_auth_members.member)))
             JOIN pg_roles ON ((pg_roles.oid = pg_auth_members.roleid)))
             JOIN pg_authid ON ((pg_user.usename = pg_authid.rolname)))
          WHERE (pg_authid.rolcanlogin IS TRUE)) foo
  ORDER BY foo.username;]]></expression>
	</reference>
</view>

<view name="export">
	<schema name="views"/>
	<role name="admin"/>
	<position x="1030.05" y="2732.55"/>
	<reference>
		<expression><![CDATA[ SELECT postable.id,
    postable.date_time,
    postable.logger,
    postable.logger_id,
    postable.logger_model,
    postable.year_tracked,
    postable.year_deployed,
    postable.year_retrieved,
    postable.ring_number,
    postable.euring_code,
    postable.species,
    postable.colony,
    postable.lon_raw,
    postable.lat_raw,
    postable.lon_smooth1,
    postable.lat_smooth1,
    postable.lon_smooth2,
    postable.lat_smooth2,
    postable.disttocol_s2,
    postable.eqfilter1,
    postable.eqfilter2,
    postable.eqfilter3,
    postable.lat_smooth2_eqfilt3,
    postable.sex,
    postable.morph,
    postable.subspecies,
    postable.age,
    postable.col_lon,
    postable.col_lat,
    postable.tfirst,
    postable.tsecond,
    postable.twl_type,
    postable.conf,
    postable.sun,
    postable.software,
    postable.light_threshold,
    postable.analyzer,
    postable.data_responsible,
    postable.logger_yeartracked,
    postable.posdata_file,
    postable.import_date,
    postable.data_version,
    postable.database_version,
    subspecies.species_name_latin,
    subspecies.sub_species
   FROM (positions.postable
     LEFT JOIN metadata.subspecies ON (((postable.species = subspecies.species_name_eng) AND (COALESCE(postable.subspecies, (''::character varying)::text) = COALESCE(subspecies.sub_species, ''::text)))));]]></expression>
	</reference>
</view>

<table name="deleted_uuid">
	<schema name="seatrack"/>
	<role name="seatrack_admin"/>
	<position x="2467.37" y="2732.55"/>
	<column name="id">
		<type name="uuid" length="0"/>
	</column>
	<column name="import_date">
		<type name="date" length="0"/>
	</column>
	<column name="deleted_date">
		<type name="date" length="0"/>
	</column>
	<column name="posdata_file">
		<type name="text" length="0"/>
	</column>
	<column name="user_name">
		<type name="text" length="0"/>
	</column>
</table>

<trigger name="tr_distribute_import" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="imports.logger_import">
		<function signature="functions.fn_distribute_from_logger_import_table()"/>
</trigger>

<trigger name="tr_delete_after_import" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="imports.logger_import">
		<function signature="functions.fn_delete_rows_from_import()"/>
</trigger>

<table name="test">
	<schema name="positions"/>
	<role name="admin"/>
	<position x="1321.99" y="1979.3"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="date_time" not-null="true">
		<type name="timestamp" length="0" precision="0"/>
	</column>
	<column name="logger" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="logger_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="logger_model" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="year_tracked" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="session_id">
		<type name="integer" length="0"/>
	</column>
	<column name="year_deployed" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="year_retrieved" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="ring_number">
		<type name="text" length="0"/>
	</column>
	<column name="euring_code">
		<type name="text" length="0"/>
	</column>
	<column name="species" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="colony" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="lon_raw">
		<type name="double precision" length="0"/>
	</column>
	<column name="lat_raw">
		<type name="double precision" length="0"/>
	</column>
	<column name="lon_smooth1">
		<type name="double precision" length="0"/>
	</column>
	<column name="lat_smooth1">
		<type name="double precision" length="0"/>
	</column>
	<column name="lon_smooth2">
		<type name="double precision" length="0"/>
	</column>
	<column name="lat_smooth2">
		<type name="double precision" length="0"/>
	</column>
	<column name="disttocol_s2">
		<type name="double precision" length="0"/>
	</column>
	<column name="eqfilter1">
		<type name="smallint" length="0"/>
	</column>
	<column name="eqfilter2">
		<type name="smallint" length="0"/>
	</column>
	<column name="eqfilter3">
		<type name="smallint" length="0"/>
	</column>
	<column name="lat_smooth2_eqfilt3">
		<type name="double precision" length="0"/>
	</column>
	<column name="sex">
		<type name="text" length="0"/>
	</column>
	<column name="morph">
		<type name="text" length="0"/>
	</column>
	<column name="subspecies">
		<type name="text" length="0"/>
	</column>
	<column name="age">
		<type name="text" length="0"/>
	</column>
	<column name="col_lon">
		<type name="double precision" length="0"/>
	</column>
	<column name="col_lat">
		<type name="double precision" length="0"/>
	</column>
	<column name="tfirst">
		<type name="timestamp" length="0" precision="0"/>
	</column>
	<column name="tsecond">
		<type name="timestamp" length="0" precision="0"/>
	</column>
	<column name="twl_type">
		<type name="smallint" length="0"/>
	</column>
	<column name="conf">
		<type name="smallint" length="0"/>
	</column>
	<column name="sun">
		<type name="double precision" length="0"/>
	</column>
	<column name="software">
		<type name="text" length="0"/>
	</column>
	<column name="light_threshold">
		<type name="smallint" length="0"/>
	</column>
	<column name="analyzer">
		<type name="text" length="0"/>
	</column>
	<column name="data_responsible">
		<type name="text" length="0"/>
	</column>
	<column name="logger_yeartracked">
		<type name="text" length="0"/>
	</column>
	<column name="posdata_file">
		<type name="text" length="0"/>
	</column>
	<column name="import_date">
		<type name="date" length="0"/>
	</column>
	<column name="data_version" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="database_version" default-value="2">
		<type name="integer" length="0"/>
	</column>
	<constraint name="test_pk" type="pk-constr" table="positions.test">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<trigger name="tr_update_import_date_test" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="positions.test">
		<function signature="functions.fn_update_import_date()"/>
</trigger>

<trigger name="tr_update_data_version_test" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="positions.test">
		<function signature="functions.fn_update_data_version()"/>
</trigger>

<function name="fn_check_ring_number_exists_on_metadata_retrieval"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN

IF NEW.logger_model_retrieved IS NOT NULL THEN
	
	IF NEW.ring_number || NEW.euring_code || NEW.logger_id_retrieved NOT IN
	(SELECT ii.ring_number || ii.euring_code || li.logger_serial_no
	FROM individuals.individ_info ii, 
	loggers.logger_info li,
	loggers.deployment d
	WHERE d.logger_id = li.logger_id
	AND d.individ_id = ii.individ_id)

	THEN RAISE EXCEPTION 'Logger % not deployed on bird ring number %', NEW.logger_id_retrieved, NEW.ring_number;
	END IF;

END IF;


RETURN NEW;
END;
]]></definition>
</function>

<trigger name="tr_check_ring_number_exists_on_metadata_retrieval" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="imports.metadata_import">
		<function signature="functions.fn_check_ring_number_exists_on_metadata_retrieval()"/>
</trigger>

<trigger name="tr_delete_individ_info_on_delete_status" firing-type="AFTER" per-line="false" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="individuals.individ_status">
		<function signature="functions.fn_delete_individ_info_on_delete_individ_status()"/>
</trigger>

<index name="logger_info_logger_serial_no_idx" table="loggers.logger_info"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="logger_serial_no"/>
		</idxelement>
</index>

<index name="logger_info_logger_model_idx" table="loggers.logger_info"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="logger_model"/>
		</idxelement>
</index>

<index name="logger_info_logger_id_idx" table="loggers.logger_info"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="logger_id"/>
		</idxelement>
</index>

<function name="fn_manual_update_postable_logging_session"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
UPDATE positions.postable pos
SET session_id = foo.session_id 
FROM (SELECT ls.session_id, p.id
FROM loggers.logging_session ls, loggers.logger_info li, positions.postable p
WHERE p.logger_id = li.logger_serial_no
AND p.logger_model = li.logger_model
AND li.logger_id = ls.logger_id
AND p.year_deployed || '_' || substr(year_retrieved::text,3, 4) = ls.year_tracked) foo
WHERE pos.id = foo.id;

END;
]]></definition>
</function>

<trigger name="tr_update_data_version" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="positions.postable">
	<condition><![CDATA[(pg_trigger_depth() = 0)]]></condition>
		<function signature="functions.fn_update_data_version()"/>
</trigger>

<view name="no_birds_person_colony_year">
	<schema name="views"/>
	<role name="seatrack_admin"/>
	<position x="50" y="2820.1"/>
	<reference>
		<expression><![CDATA[ SELECT metadata_import.data_responsible,
    metadata_import.colony,
    date_part('year'::text, metadata_import.date) AS _year,
    count(DISTINCT ROW(metadata_import.ring_number, metadata_import.euring_code)) AS no_birds
   FROM imports.metadata_import
  GROUP BY metadata_import.data_responsible, metadata_import.colony, (date_part('year'::text, metadata_import.date));]]></expression>
	</reference>
</view>

<view name="no_birds_colony_year">
	<schema name="views"/>
	<role name="seatrack_admin"/>
	<position x="329.7" y="2820.1"/>
	<reference>
		<expression><![CDATA[ SELECT metadata_import.colony,
    date_part('year'::text, metadata_import.date) AS _year,
    count(DISTINCT ROW(metadata_import.ring_number, metadata_import.euring_code)) AS no_birds
   FROM imports.metadata_import
  GROUP BY metadata_import.colony, (date_part('year'::text, metadata_import.date));]]></expression>
	</reference>
</view>

<index name="postable_colony_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="colony"/>
		</idxelement>
</index>

<table name="file_archive_backup">
	<schema name="loggers"/>
	<role name="jens_astrom"/>
	<position x="3450.94" y="531.25"/>
	<column name="id">
		<type name="uuid" length="0"/>
	</column>
	<column name="file_id">
		<type name="integer" length="0"/>
	</column>
	<column name="session_id">
		<type name="text" length="0"/>
	</column>
	<column name="filename">
		<type name="text" length="0"/>
	</column>
	<column name="data_type">
		<type name="text" length="0"/>
	</column>
</table>

<table name="file_test">
	<schema name="loggers"/>
	<role name="jens_astrom"/>
	<position x="2003.85" y="858.5"/>
	<column name="id">
		<type name="uuid" length="0"/>
	</column>
	<column name="file_id">
		<type name="integer" length="0"/>
	</column>
	<column name="session_id">
		<type name="text" length="0"/>
	</column>
	<column name="filename">
		<type name="text" length="0"/>
	</column>
	<column name="data_type">
		<type name="text" length="0"/>
	</column>
</table>

<function name="fn_manual_update_materialized_views_on_postable_update"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1000"
		row-amount="0">
	<schema name="functions"/>
	<role name="seatrack_admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void" length="1"/>
	</return-type>
	<definition><![CDATA[
BEGIN
REFRESH MATERIALIZED VIEW views.categories;
REFRESH MATERIALIZED VIEW views.longersum;
REFRESH MATERIALIZED VIEW views.shorttable;
REFRESH MATERIALIZED VIEW views.shorttableeqfilter3;
REFRESH MATERIALIZED VIEW views.postable2;
END;
]]></definition>
</function>

<index name="postable_logger_yeartracked_idx" table="positions.postable"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="logger_yeartracked"/>
		</idxelement>
</index>

<index name="individ_info_individ_id_idx" table="individuals.individ_info"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="individ_id"/>
		</idxelement>
</index>

<view name="categories" materialized="true">
	<schema name="views"/>
	<role name="seatrack_writer"/>
	<position x="569.527" y="2820.1"/>
	<reference>
		<expression><![CDATA[ SELECT postable.species AS species_cat,
    postable.colony AS colony_cat,
    postable.data_responsible AS responsible_cat,
    postable.ring_number AS ring_number_cat
   FROM positions.postable
  GROUP BY postable.species, postable.colony, postable.data_responsible, postable.ring_number;]]></expression>
	</reference>
</view>

<view name="longersum" materialized="true">
	<schema name="views"/>
	<role name="seatrack_writer"/>
	<position x="799.355" y="2820.1"/>
	<reference>
		<expression><![CDATA[ SELECT postable.year_tracked AS "år",
    postable.species,
    count(DISTINCT postable.ring_number) AS antall_unike_ring_nummer,
    count(*) AS antall_posisjoner,
    count(DISTINCT postable.colony) AS antall_kolonier
   FROM positions.postable
  GROUP BY postable.year_tracked, postable.species
  ORDER BY postable.year_tracked, postable.species;]]></expression>
	</reference>
</view>

<view name="shorttable" materialized="true">
	<schema name="views"/>
	<role name="seatrack_writer"/>
	<position x="1029.18" y="2820.1"/>
	<reference>
		<expression><![CDATA[ SELECT count(DISTINCT postable.species) AS "Antall arter",
    count(DISTINCT postable.colony) AS "Antall kolonier",
    count(DISTINCT postable.year_tracked) AS "Antall år",
    count(*) AS "Antall positions",
    count(DISTINCT postable.ring_number) AS "Antall individer",
    count(DISTINCT postable.logger_yeartracked) AS "Antall tracks (logger_yeartracked)"
   FROM positions.postable;]]></expression>
	</reference>
</view>

<view name="shorttableeqfilter3" materialized="true">
	<schema name="views"/>
	<role name="seatrack_writer"/>
	<position x="50" y="2907.65"/>
	<reference>
		<expression><![CDATA[ SELECT count(DISTINCT postable.species) AS "Antall arter",
    count(DISTINCT postable.colony) AS "Antall kolonier",
    count(DISTINCT postable.year_tracked) AS "Antall år",
    count(*) AS "Antall positions",
    count(DISTINCT postable.ring_number) AS "Antall individer",
    count(DISTINCT postable.logger_yeartracked) AS "Antall tracks (logger_yeartracked)"
   FROM positions.postable
  WHERE (postable.eqfilter3 = 1);]]></expression>
	</reference>
</view>

<view name="logger_info">
	<schema name="views"/>
	<role name="seatrack_writer"/>
	<position x="292.827" y="2907.65"/>
	<reference>
		<expression><![CDATA[ SELECT foo.logger_serial_no,
    foo.logger_id,
    foo.starttime_gmt,
    foo.logging_mode,
    foo.producer,
    foo.logger_model,
    foo.production_year,
    foo.session_id,
    foo.project,
    bar.deployment_date,
    bar.retrieval_date,
    bar.retrieval_type,
    foo.started_by,
    foo.started_where,
    foo.days_delayed,
    foo.programmed_gmt_time,
    bar.intended_species,
    bar.intended_location,
    bar.intended_deployer,
    bar.deployment_species,
    bar.colony,
    bar.download_type,
    bar.download_date,
    bar.shutdown_date,
    bar.downloaded_by,
    bar.decomissioned,
    bar.field_status
   FROM (( SELECT startup.session_id,
            logger_info.logger_serial_no,
            logger_info.logger_id,
            startup.starttime_gmt,
            startup.logging_mode,
            logger_info.producer,
            logger_info.logger_model,
            logger_info.production_year,
            logger_info.project,
            startup.started_by,
            startup.started_where,
            startup.days_delayed,
            startup.programmed_gmt_time
           FROM (loggers.logger_info
             LEFT JOIN loggers.startup ON ((logger_info.logger_id = startup.logger_id)))) foo
     LEFT JOIN ( SELECT logging_session.session_id,
            deployment.deployment_date,
            retrieval.retrieval_date,
            retrieval.retrieval_type,
            allocation.intended_species,
            allocation.intended_location,
            allocation.intended_deployer,
            deployment.deployment_species,
            logging_session.colony,
            shutdown.download_type,
            shutdown.download_date,
            shutdown.shutdown_date,
            shutdown.downloaded_by,
            shutdown.decomissioned,
            shutdown.field_status
           FROM loggers.logging_session,
            loggers.allocation,
            loggers.deployment,
            loggers.retrieval,
            loggers.shutdown
          WHERE ((logging_session.session_id = allocation.session_id) AND (logging_session.session_id = deployment.session_id) AND (logging_session.session_id = retrieval.session_id) AND (logging_session.session_id = shutdown.session_id))) bar ON ((foo.session_id = bar.session_id)))
  ORDER BY foo.logger_id;]]></expression>
	</reference>
</view>

<view name="postable2" materialized="true">
	<schema name="views"/>
	<role name="seatrack_writer"/>
	<position x="517.655" y="2907.65"/>
	<reference>
		<expression><![CDATA[ SELECT p.id,
    p.date_time,
    p.logger,
    p.logger_id,
    p.logger_model,
    p.year_tracked,
    p.session_id,
    p.year_deployed,
    p.year_retrieved,
    ii.ring_number,
    ii.euring_code,
    ii.species,
    ls.colony,
    p.lon_raw,
    p.lat_raw,
    p.lon_smooth1,
    p.lat_smooth1,
    p.lon_smooth2,
    p.lat_smooth2,
    p.disttocol_s2,
    p.eqfilter1,
    p.eqfilter2,
    p.eqfilter3,
    p.lat_smooth2_eqfilt3,
    ii.sex,
    ii.morph,
    ii.subspecies,
    ii.age,
    co.lon AS col_lon,
    co.lat AS col_lat,
    p.tfirst,
    p.tsecond,
    p.twl_type,
    p.conf,
    p.sun,
    p.software,
    p.light_threshold,
    p.analyzer,
    iis.data_responsible,
    p.logger_yeartracked,
    p.posdata_file,
    p.import_date,
    p.data_version,
    p.database_version
   FROM positions.postable p,
    loggers.logging_session ls,
    individuals.individ_info ii,
    metadata.colony co,
    individuals.individ_status iis
  WHERE ((p.session_id = ls.session_id) AND (ls.individ_id = ii.individ_id) AND (ls.colony = co.colony_int_name) AND (ls.session_id = iis.session_id));]]></expression>
	</reference>
</view>

<index name="postable2_colony_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[colony]]></expression>
		</idxelement>
</index>

<index name="postable2_datarespons_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[data_responsible]]></expression>
		</idxelement>
</index>

<index name="postable2_datetime_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[date_time]]></expression>
		</idxelement>
</index>

<index name="postable2_eqfilter3_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[eqfilter3]]></expression>
		</idxelement>
</index>

<index name="postable2_id_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[id]]></expression>
		</idxelement>
</index>

<index name="postable2_logger_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[logger_id]]></expression>
		</idxelement>
</index>

<index name="postable2_logger_model" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[logger_model]]></expression>
		</idxelement>
</index>

<index name="postable2_logger_yeartracked_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[logger_yeartracked]]></expression>
		</idxelement>
</index>

<index name="postable2_postdatafile_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[posdata_file]]></expression>
		</idxelement>
</index>

<index name="postable2_ring_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[ring_number]]></expression>
		</idxelement>
</index>

<index name="postable2_session_id_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[session_id]]></expression>
		</idxelement>
</index>

<index name="postable2_species_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[species]]></expression>
		</idxelement>
</index>

<index name="postable2_year_tracked_idx" table="views.postable2"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<expression><![CDATA[year_tracked]]></expression>
		</idxelement>
</index>

<function name="fn_create_individ_id"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="functions"/>
	<role name="admin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="0"/>
	</return-type>
	<definition><![CDATA[BEGIN 
NEW.individ_id := NEW.euring_code || '_' || NEW.ring_number;
RETURN NEW;
END;]]></definition>
</function>

<trigger name="tr_create_individ_id" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="individuals.individ_info">
	<condition><![CDATA[WHEN ((new.individ_id IS NULL))]]></condition>
		<function signature="functions.fn_create_individ_id()"/>
</trigger>

<table name="light">
	<schema name="recordings"/>
	<role name="admin"/>
	<position x="3255.54" y="1228.05"/>
	<column name="id" not-null="true" default-value="uuid_generate_v1()">
		<type name="uuid" length="0"/>
	</column>
	<column name="session_id" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="filename" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="individ_id">
		<type name="text" length="0"/>
	</column>
	<column name="date_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="clipped" not-null="true">
		<type name="boolean" length="0"/>
	</column>
	<column name="raw_light">
		<type name="double precision" length="0"/>
	</column>
	<column name="std_light">
		<type name="double precision" length="0"/>
	</column>
	<constraint name="light_pk" type="pk-constr" table="recordings.light">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<constraint name="logger_model_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.logger_models" table="loggers.logger_info">
	<columns names="producer,logger_model" ref-type="src-columns"/>
	<columns names="producer,model" ref-type="dst-columns"/>
</constraint>

<constraint name="logger_mod_prod_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.logger_producers" table="metadata.logger_models">
	<columns names="producer" ref-type="src-columns"/>
	<columns names="producer" ref-type="dst-columns"/>
</constraint>

<constraint name="species_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.species" table="loggers.allocation">
	<columns names="intended_species" ref-type="src-columns"/>
	<columns names="species_name_eng" ref-type="dst-columns"/>
</constraint>

<constraint name="allocation_people_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.people" table="loggers.allocation">
	<columns names="intended_deployer" ref-type="src-columns"/>
	<columns names="name" ref-type="dst-columns"/>
</constraint>

<constraint name="allocation_logger_id_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.logger_info" table="loggers.allocation">
	<columns names="logger_id" ref-type="src-columns"/>
	<columns names="logger_id" ref-type="dst-columns"/>
</constraint>

<constraint name="startup_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="RESTRICT" del-action="CASCADE" ref-table="loggers.startup" table="loggers.allocation">
	<columns names="session_id" ref-type="src-columns"/>
	<columns names="session_id" ref-type="dst-columns"/>
</constraint>

<constraint name="deployment_logging_session_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.deployment" table="loggers.logging_session">
	<columns names="deployment_id" ref-type="src-columns"/>
	<columns names="deployment_id" ref-type="dst-columns"/>
</constraint>

<constraint name="retrieval_logging_session_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.retrieval" table="loggers.logging_session">
	<columns names="retrieval_id" ref-type="src-columns"/>
	<columns names="retrieval_id" ref-type="dst-columns"/>
</constraint>

<constraint name="logging_session_individ_id_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="individuals.individ_info" table="loggers.logging_session">
	<columns names="individ_id" ref-type="src-columns"/>
	<columns names="individ_id" ref-type="dst-columns"/>
</constraint>

<constraint name="logging_session_logger_id_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.logger_info" table="loggers.logging_session">
	<columns names="logger_id" ref-type="src-columns"/>
	<columns names="logger_id" ref-type="dst-columns"/>
</constraint>

<constraint name="colony_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.colony" table="metadata.location">
	<columns names="colony_nat_name" ref-type="src-columns"/>
	<columns names="colony_nat_name" ref-type="dst-columns"/>
</constraint>

<constraint name="location_colony_int_name_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.colony" table="metadata.location">
	<columns names="colony_int_name" ref-type="src-columns"/>
	<columns names="colony_int_name" ref-type="dst-columns"/>
</constraint>

<constraint name="species_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.species" table="loggers.deployment">
	<columns names="deployment_species" ref-type="src-columns"/>
	<columns names="species_name_eng" ref-type="dst-columns"/>
</constraint>

<constraint name="location_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.location" table="loggers.deployment">
	<columns names="deployment_location" ref-type="src-columns"/>
	<columns names="location_name" ref-type="dst-columns"/>
</constraint>

<constraint name="logger_fate_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.logger_fate" table="loggers.deployment">
	<columns names="logger_fate" ref-type="src-columns"/>
	<columns names="logger_fate" ref-type="dst-columns"/>
</constraint>

<constraint name="individ_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="individuals.individ_info" table="loggers.deployment">
	<columns names="individ_id" ref-type="src-columns"/>
	<columns names="individ_id" ref-type="dst-columns"/>
</constraint>

<constraint name="deployment_location_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.location" table="loggers.deployment">
	<columns names="deployment_location" ref-type="src-columns"/>
	<columns names="location_name" ref-type="dst-columns"/>
</constraint>

<constraint name="deployment_logger_mount_method_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.mounting_types" table="loggers.deployment">
	<columns names="logger_mount_method" ref-type="src-columns"/>
	<columns names="logger_mount_method" ref-type="dst-columns"/>
</constraint>

<constraint name="deployment_logging_session_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="loggers.logging_session" table="loggers.deployment">
	<columns names="session_id" ref-type="src-columns"/>
	<columns names="session_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sexing_method_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.sexing_method" table="individuals.individ_info">
	<columns names="sexing_method" ref-type="src-columns"/>
	<columns names="method" ref-type="dst-columns"/>
</constraint>

<constraint name="sex_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.sex" table="individuals.individ_info">
	<columns names="sex" ref-type="src-columns"/>
	<columns names="sex" ref-type="dst-columns"/>
</constraint>

<constraint name="species_fk" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="metadata.subspecies" table="individuals.individ_info">
	<columns names="species,subspecies" ref-type="src-columns"/>
	<columns names="species_name_eng,sub_species" ref-type="dst-columns"/>
</constraint>

<constraint name="status_logger_id_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.logger_info" table="individuals.individ_status">
	<columns names="logger_id" ref-type="src-columns"/>
	<columns names="logger_id" ref-type="dst-columns"/>
</constraint>

<constraint name="status_breeding_stage_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.breeding_stages" table="individuals.individ_status">
	<columns names="breeding_stage" ref-type="src-columns"/>
	<columns names="breeding_stage" ref-type="dst-columns"/>
</constraint>

<constraint name="breeding_success_criterion_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.breeding_success_criterion" table="individuals.individ_status">
	<columns names="breeding_success_criterion" ref-type="src-columns"/>
	<columns names="breeding_success_criterion" ref-type="dst-columns"/>
</constraint>

<constraint name="individ_status_data_responsible_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.people" table="individuals.individ_status">
	<columns names="data_responsible" ref-type="src-columns"/>
	<columns names="name" ref-type="dst-columns"/>
</constraint>

<constraint name="fk_species" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.subspecies" table="individuals.individ_status">
	<columns names="species,subspecies" ref-type="src-columns"/>
	<columns names="species_name_eng,sub_species" ref-type="dst-columns"/>
</constraint>

<constraint name="fk_sex" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.sex" table="individuals.individ_status">
	<columns names="sex" ref-type="src-columns"/>
	<columns names="sex" ref-type="dst-columns"/>
</constraint>

<constraint name="fk_sexing_method" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.sexing_method" table="individuals.individ_status">
	<columns names="sexing_method" ref-type="src-columns"/>
	<columns names="method" ref-type="dst-columns"/>
</constraint>

<constraint name="status_logging_session_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="loggers.logging_session" table="individuals.individ_status">
	<columns names="session_id" ref-type="src-columns"/>
	<columns names="session_id" ref-type="dst-columns"/>
</constraint>

<constraint name="individ_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="individuals.individ_info" table="loggers.retrieval">
	<columns names="individ_id" ref-type="src-columns"/>
	<columns names="individ_id" ref-type="dst-columns"/>
</constraint>

<constraint name="location_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.location" table="loggers.retrieval">
	<columns names="retrieval_location" ref-type="src-columns"/>
	<columns names="location_name" ref-type="dst-columns"/>
</constraint>

<constraint name="retrieval_type_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.retrieval_type" table="loggers.retrieval">
	<columns names="retrieval_type" ref-type="src-columns"/>
	<columns names="type" ref-type="dst-columns"/>
</constraint>

<constraint name="retrieval_logging_session_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="loggers.logging_session" table="loggers.retrieval">
	<columns names="session_id" ref-type="src-columns"/>
	<columns names="session_id" ref-type="dst-columns"/>
</constraint>

<constraint name="download_type_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.download_types" table="loggers.shutdown">
	<columns names="download_type" ref-type="src-columns"/>
	<columns names="download_type" ref-type="dst-columns"/>
</constraint>

<constraint name="shutdown_startup_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="loggers.startup" table="loggers.shutdown">
	<columns names="session_id" ref-type="src-columns"/>
	<columns names="session_id" ref-type="dst-columns"/>
</constraint>

<constraint name="shutdown_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="loggers.shutdown" table="loggers.file_archive">
	<columns names="session_id" ref-type="src-columns"/>
	<columns names="session_id" ref-type="dst-columns"/>
</constraint>

<constraint name="events_deployment_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.deployment" table="loggers.events">
	<columns names="deployment_id" ref-type="src-columns"/>
	<columns names="deployment_id" ref-type="dst-columns"/>
</constraint>

<constraint name="events_retrieval_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.retrieval" table="loggers.events">
	<columns names="retrieval_id" ref-type="src-columns"/>
	<columns names="retrieval_id" ref-type="dst-columns"/>
</constraint>

<constraint name="logger_year_tracked_logging_session_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.logging_session" table="positions.logger_year_tracked">
	<columns names="session_id" ref-type="src-columns"/>
	<columns names="session_id" ref-type="dst-columns"/>
</constraint>

<constraint name="temp_filename_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.file_archive" table="recordings.temperature">
	<columns names="filename" ref-type="src-columns"/>
	<columns names="filename" ref-type="dst-columns"/>
</constraint>

<constraint name="activity_filename_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.file_archive" table="recordings.activity">
	<columns names="filename" ref-type="src-columns"/>
	<columns names="filename" ref-type="dst-columns"/>
</constraint>

<constraint name="logging_modes_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="metadata.logging_modes" table="loggers.startup">
	<columns names="logging_mode" ref-type="src-columns"/>
	<columns names="mode" ref-type="dst-columns"/>
</constraint>

<constraint name="people_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.people" table="loggers.startup">
	<columns names="started_by" ref-type="src-columns"/>
	<columns names="name" ref-type="dst-columns"/>
</constraint>

<constraint name="startup_logger_id_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.logger_info" table="loggers.startup">
	<columns names="logger_id" ref-type="src-columns"/>
	<columns names="logger_id" ref-type="dst-columns"/>
</constraint>

<constraint name="observation_individ_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="individuals.individ_info" table="individuals.observations">
	<columns names="individ_id" ref-type="src-columns"/>
	<columns names="individ_id" ref-type="dst-columns"/>
</constraint>

<constraint name="logger_model_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="metadata.logger_models" table="metadata.logger_files">
	<columns names="logger_model,logger_producer" ref-type="src-columns"/>
	<columns names="model,producer" ref-type="dst-columns"/>
</constraint>

<constraint name="logger_retrieved_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="loggers.logger_info" table="imports.metadata_import">
	<columns names="logger_id_retrieved,logger_model_retrieved" ref-type="src-columns"/>
	<columns names="logger_serial_no,logger_model" ref-type="dst-columns"/>
</constraint>

<constraint name="logger_deployed_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="loggers.logger_info" table="imports.metadata_import">
	<columns names="logger_id_deployed,logger_model_deployed" ref-type="src-columns"/>
	<columns names="logger_serial_no,logger_model" ref-type="dst-columns"/>
</constraint>

<constraint name="species_fk" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="metadata.subspecies" table="imports.metadata_import">
	<columns names="species,subspecies" ref-type="src-columns"/>
	<columns names="species_name_eng,sub_species" ref-type="dst-columns"/>
</constraint>

<constraint name="sex_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="metadata.sex" table="imports.metadata_import">
	<columns names="sex" ref-type="src-columns"/>
	<columns names="sex" ref-type="dst-columns"/>
</constraint>

<constraint name="sexing_method_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="metadata.sexing_method" table="imports.metadata_import">
	<columns names="sexing_method" ref-type="src-columns"/>
	<columns names="method" ref-type="dst-columns"/>
</constraint>

<constraint name="breeding_stages_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="metadata.breeding_stages" table="imports.metadata_import">
	<columns names="breeding_stage" ref-type="src-columns"/>
	<columns names="breeding_stage" ref-type="dst-columns"/>
</constraint>

<constraint name="breeding_success_criterion_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="metadata.breeding_success_criterion" table="imports.metadata_import">
	<columns names="breeding_success_criterion" ref-type="src-columns"/>
	<columns names="breeding_success_criterion" ref-type="dst-columns"/>
</constraint>

<constraint name="colony_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="RESTRICT" ref-table="metadata.location" table="imports.metadata_import">
	<columns names="colony" ref-type="src-columns"/>
	<columns names="location_name" ref-type="dst-columns"/>
</constraint>

<constraint name="data_responsible_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="metadata.people" table="imports.metadata_import">
	<columns names="data_responsible" ref-type="src-columns"/>
	<columns names="name" ref-type="dst-columns"/>
</constraint>

<constraint name="logger_mount_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="metadata.mounting_types" table="imports.metadata_import">
	<columns names="logger_mount_method" ref-type="src-columns"/>
	<columns names="logger_mount_method" ref-type="dst-columns"/>
</constraint>

<constraint name="light_filename_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="RESTRICT" ref-table="loggers.file_archive" table="recordings.light">
	<columns names="filename" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<relationship name="rel_logger_info_logger_models" type="relfk"
	 custom-color="#87ec86"
	 src-table="loggers.logger_info"
	 dst-table="metadata.logger_models" reference-fk="logger_model_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_logger_models_logger_producers" type="relfk"
	 custom-color="#63e1f3"
	 src-table="metadata.logger_models"
	 dst-table="metadata.logger_producers" reference-fk="logger_mod_prod_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_allocation_species" type="relfk"
	 custom-color="#e41bea"
	 src-table="loggers.allocation"
	 dst-table="metadata.species" reference-fk="species_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_allocation_people" type="relfk"
	 custom-color="#36beed"
	 src-table="loggers.allocation"
	 dst-table="metadata.people" reference-fk="allocation_people_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_allocation_logger_info" type="relfk"
	 custom-color="#871fa4"
	 src-table="loggers.allocation"
	 dst-table="loggers.logger_info" reference-fk="allocation_logger_id_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_allocation_startup" type="relfk"
	 custom-color="#484368"
	 src-table="loggers.allocation"
	 dst-table="loggers.startup" reference-fk="startup_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_logging_session_deployment" type="relfk"
	 custom-color="#ce5d86"
	 src-table="loggers.logging_session"
	 dst-table="loggers.deployment" reference-fk="deployment_logging_session_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_logging_session_retrieval" type="relfk"
	 custom-color="#132c5f"
	 src-table="loggers.logging_session"
	 dst-table="loggers.retrieval" reference-fk="retrieval_logging_session_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_logging_session_individ_info" type="relfk"
	 custom-color="#3aff7d"
	 src-table="loggers.logging_session"
	 dst-table="individuals.individ_info" reference-fk="logging_session_individ_id_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_logging_session_logger_info" type="relfk"
	 custom-color="#5cce88"
	 src-table="loggers.logging_session"
	 dst-table="loggers.logger_info" reference-fk="logging_session_logger_id_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_location_colony" type="relfk"
	 custom-color="#264253"
	 src-table="metadata.location"
	 dst-table="metadata.colony" reference-fk="colony_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_location_colony1" type="relfk"
	 custom-color="#e55a24"
	 src-table="metadata.location"
	 dst-table="metadata.colony" reference-fk="location_colony_int_name_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_deployment_species" type="relfk"
	 custom-color="#044d5b"
	 src-table="loggers.deployment"
	 dst-table="metadata.species" reference-fk="species_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_deployment_location" type="relfk"
	 custom-color="#713b0a"
	 src-table="loggers.deployment"
	 dst-table="metadata.location" reference-fk="location_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_deployment_logger_fate" type="relfk"
	 custom-color="#6217d0"
	 src-table="loggers.deployment"
	 dst-table="metadata.logger_fate" reference-fk="logger_fate_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_deployment_individ_info" type="relfk"
	 custom-color="#aa9ef1"
	 src-table="loggers.deployment"
	 dst-table="individuals.individ_info" reference-fk="individ_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_deployment_location1" type="relfk"
	 custom-color="#468d0a"
	 src-table="loggers.deployment"
	 dst-table="metadata.location" reference-fk="deployment_location_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_deployment_mounting_types" type="relfk"
	 custom-color="#822586"
	 src-table="loggers.deployment"
	 dst-table="metadata.mounting_types" reference-fk="deployment_logger_mount_method_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_deployment_logging_session" type="relfk"
	 custom-color="#1edf72"
	 src-table="loggers.deployment"
	 dst-table="loggers.logging_session" reference-fk="deployment_logging_session_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_individ_info_sexing_method" type="relfk"
	 custom-color="#e86279"
	 src-table="individuals.individ_info"
	 dst-table="metadata.sexing_method" reference-fk="sexing_method_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_individ_info_sex" type="relfk"
	 custom-color="#acfe05"
	 src-table="individuals.individ_info"
	 dst-table="metadata.sex" reference-fk="sex_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_individ_info_subspecies" type="relfk"
	 custom-color="#593164"
	 src-table="individuals.individ_info"
	 dst-table="metadata.subspecies" reference-fk="species_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_individ_status_logger_info" type="relfk"
	 custom-color="#4f7b62"
	 src-table="individuals.individ_status"
	 dst-table="loggers.logger_info" reference-fk="status_logger_id_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_individ_status_breeding_stages" type="relfk"
	 custom-color="#cc5671"
	 src-table="individuals.individ_status"
	 dst-table="metadata.breeding_stages" reference-fk="status_breeding_stage_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_individ_status_breeding_success_criterion" type="relfk"
	 custom-color="#247722"
	 src-table="individuals.individ_status"
	 dst-table="metadata.breeding_success_criterion" reference-fk="breeding_success_criterion_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_individ_status_people" type="relfk"
	 custom-color="#e6e82a"
	 src-table="individuals.individ_status"
	 dst-table="metadata.people" reference-fk="individ_status_data_responsible_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_individ_status_subspecies" type="relfk"
	 custom-color="#089c3d"
	 src-table="individuals.individ_status"
	 dst-table="metadata.subspecies" reference-fk="fk_species"
	 src-required="false" dst-required="false"/>

<relationship name="rel_individ_status_sex" type="relfk"
	 custom-color="#21df05"
	 src-table="individuals.individ_status"
	 dst-table="metadata.sex" reference-fk="fk_sex"
	 src-required="false" dst-required="false"/>

<relationship name="rel_individ_status_sexing_method" type="relfk"
	 custom-color="#463635"
	 src-table="individuals.individ_status"
	 dst-table="metadata.sexing_method" reference-fk="fk_sexing_method"
	 src-required="false" dst-required="false"/>

<relationship name="rel_individ_status_logging_session" type="relfk"
	 custom-color="#7e3399"
	 src-table="individuals.individ_status"
	 dst-table="loggers.logging_session" reference-fk="status_logging_session_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_retrieval_individ_info" type="relfk"
	 custom-color="#c8e1b6"
	 src-table="loggers.retrieval"
	 dst-table="individuals.individ_info" reference-fk="individ_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_retrieval_location" type="relfk"
	 custom-color="#b4ece1"
	 src-table="loggers.retrieval"
	 dst-table="metadata.location" reference-fk="location_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_retrieval_retrieval_type" type="relfk"
	 custom-color="#a4b789"
	 src-table="loggers.retrieval"
	 dst-table="metadata.retrieval_type" reference-fk="retrieval_type_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_retrieval_logging_session" type="relfk"
	 custom-color="#51fd24"
	 src-table="loggers.retrieval"
	 dst-table="loggers.logging_session" reference-fk="retrieval_logging_session_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_shutdown_download_types" type="relfk"
	 custom-color="#55deed"
	 src-table="loggers.shutdown"
	 dst-table="metadata.download_types" reference-fk="download_type_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_shutdown_startup" type="relfk"
	 custom-color="#916b37"
	 src-table="loggers.shutdown"
	 dst-table="loggers.startup" reference-fk="shutdown_startup_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_file_archive_shutdown" type="relfk"
	 custom-color="#9e2eb8"
	 src-table="loggers.file_archive"
	 dst-table="loggers.shutdown" reference-fk="shutdown_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_events_deployment" type="relfk"
	 custom-color="#0defdb"
	 src-table="loggers.events"
	 dst-table="loggers.deployment" reference-fk="events_deployment_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_events_retrieval" type="relfk"
	 custom-color="#a26b15"
	 src-table="loggers.events"
	 dst-table="loggers.retrieval" reference-fk="events_retrieval_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_logger_year_tracked_logging_session" type="relfk"
	 custom-color="#fbcb33"
	 src-table="positions.logger_year_tracked"
	 dst-table="loggers.logging_session" reference-fk="logger_year_tracked_logging_session_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_startup_logging_modes" type="relfk"
	 custom-color="#9f9777"
	 src-table="loggers.startup"
	 dst-table="metadata.logging_modes" reference-fk="logging_modes_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_startup_people" type="relfk"
	 custom-color="#2f4c5e"
	 src-table="loggers.startup"
	 dst-table="metadata.people" reference-fk="people_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_startup_logger_info" type="relfk"
	 custom-color="#ba36e0"
	 src-table="loggers.startup"
	 dst-table="loggers.logger_info" reference-fk="startup_logger_id_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_observations_individ_info" type="relfk"
	 custom-color="#ab8f1e"
	 src-table="individuals.observations"
	 dst-table="individuals.individ_info" reference-fk="observation_individ_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_logger_files_logger_models" type="relfk"
	 custom-color="#a13c6a"
	 src-table="metadata.logger_files"
	 dst-table="metadata.logger_models" reference-fk="logger_model_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_metadata_import_logger_info" type="relfk"
	 custom-color="#13f545"
	 src-table="imports.metadata_import"
	 dst-table="loggers.logger_info" reference-fk="logger_retrieved_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_metadata_import_logger_info1" type="relfk"
	 custom-color="#9b167a"
	 src-table="imports.metadata_import"
	 dst-table="loggers.logger_info" reference-fk="logger_deployed_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_metadata_import_subspecies" type="relfk"
	 custom-color="#7059d9"
	 src-table="imports.metadata_import"
	 dst-table="metadata.subspecies" reference-fk="species_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_metadata_import_sex" type="relfk"
	 custom-color="#45fc2d"
	 src-table="imports.metadata_import"
	 dst-table="metadata.sex" reference-fk="sex_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_metadata_import_sexing_method" type="relfk"
	 custom-color="#4a4f0e"
	 src-table="imports.metadata_import"
	 dst-table="metadata.sexing_method" reference-fk="sexing_method_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_metadata_import_breeding_stages" type="relfk"
	 custom-color="#805828"
	 src-table="imports.metadata_import"
	 dst-table="metadata.breeding_stages" reference-fk="breeding_stages_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_metadata_import_breeding_success_criterion" type="relfk"
	 custom-color="#959338"
	 src-table="imports.metadata_import"
	 dst-table="metadata.breeding_success_criterion" reference-fk="breeding_success_criterion_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_metadata_import_location" type="relfk"
	 custom-color="#47ae3a"
	 src-table="imports.metadata_import"
	 dst-table="metadata.location" reference-fk="colony_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_metadata_import_people" type="relfk"
	 custom-color="#9a7a26"
	 src-table="imports.metadata_import"
	 dst-table="metadata.people" reference-fk="data_responsible_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_metadata_import_mounting_types" type="relfk"
	 custom-color="#319552"
	 src-table="imports.metadata_import"
	 dst-table="metadata.mounting_types" reference-fk="logger_mount_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_temperature_file_archive" type="relfk"
	 src-table="recordings.temperature"
	 dst-table="loggers.file_archive" reference-fk="temp_filename_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_activity_file_archive" type="relfk"
	 src-table="recordings.activity"
	 dst-table="loggers.file_archive" reference-fk="activity_filename_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_light_file_archive" type="relfk"
	 src-table="recordings.light"
	 dst-table="loggers.file_archive" reference-fk="light_filename_fk"
	 src-required="false" dst-required="false"/>

<permission>
	<object name="seatrack_devel" type="database"/>
	<privileges connect="true" temporary="true"/>
</permission>
<permission>
	<object name="seatrack_devel" type="database"/>
	<roles names="admin"/>
	<privileges create="true" connect="true" temporary="true"/>
</permission>
<permission>
	<object name="seatrack_devel" type="database"/>
	<roles names="seatrack_reader"/>
	<privileges connect="true"/>
</permission>
<permission>
	<object name="seatrack_devel" type="database"/>
	<roles names="seatrack_writer"/>
	<privileges connect="true"/>
</permission>
<permission>
	<object name="metadata" type="schema"/>
	<roles names="admin"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="metadata" type="schema"/>
	<roles names="seatrack_reader"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="metadata" type="schema"/>
	<roles names="seatrack_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="metadata" type="schema"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="loggers" type="schema"/>
	<roles names="admin"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="loggers" type="schema"/>
	<roles names="seatrack_reader"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="loggers" type="schema"/>
	<roles names="seatrack_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="loggers" type="schema"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="individuals" type="schema"/>
	<roles names="admin"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="individuals" type="schema"/>
	<roles names="seatrack_reader"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="individuals" type="schema"/>
	<roles names="seatrack_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="individuals" type="schema"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="positions" type="schema"/>
	<roles names="admin"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="positions" type="schema"/>
	<roles names="seatrack_reader"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="positions" type="schema"/>
	<roles names="seatrack_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="positions" type="schema"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="recordings" type="schema"/>
	<roles names="admin"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="recordings" type="schema"/>
	<roles names="seatrack_reader"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="views" type="schema"/>
	<roles names="admin"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="views" type="schema"/>
	<roles names="seatrack_reader"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="views" type="schema"/>
	<roles names="seatrack_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="views" type="schema"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="functions" type="schema"/>
	<roles names="admin"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="functions" type="schema"/>
	<roles names="seatrack_reader"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="imports" type="schema"/>
	<roles names="admin"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="imports" type="schema"/>
	<roles names="seatrack_reader"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="imports" type="schema"/>
	<roles names="seatrack_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="imports" type="schema"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="loggers.logger_info" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.logger_info" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="loggers.logger_info" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.logger_producers" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.logger_producers" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.logger_producers" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.logger_models" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.logger_models" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.logger_models" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.logging_modes" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.logging_modes" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.logging_modes" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.people" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.people" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.people" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.allocation" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.allocation" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="loggers.allocation" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.logging_session" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.logging_session" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="loggers.logging_session" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.species" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.species" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.species" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.colony" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.colony" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.colony" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.location" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.location" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.location" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.deployment" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.deployment" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="loggers.deployment" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.logger_fate" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.logger_fate" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.logger_fate" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="individuals.individ_info" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="individuals.individ_info" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="individuals.individ_info" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.sex" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.sex" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.sex" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.sexing_method" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.sexing_method" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.sexing_method" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="individuals.individ_status" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="individuals.individ_status" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="individuals.individ_status" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.retrieval" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.retrieval" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="loggers.retrieval" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.shutdown" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.shutdown" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="loggers.shutdown" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.file_archive" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.file_archive" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="loggers.file_archive" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.postable" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.postable" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="positions.postable" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.processing" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.processing" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="positions.processing" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.subspecies" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.subspecies" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.subspecies" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.events" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.events" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="loggers.events" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.logger_year_tracked" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.logger_year_tracked" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="positions.logger_year_tracked" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="recordings.temperature" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="recordings.temperature" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="recordings.temperature" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="recordings.activity" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="recordings.activity" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="views.postable" type="view"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.postable" type="view"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="views.postable" type="view"/>
	<roles names="seatrack_writer"/>
	<privileges update="true"/>
</permission>
<permission>
	<object name="views.active_logging_sessions" type="view"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.active_logging_sessions" type="view"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="views.active_logging_sessions" type="view"/>
	<roles names="seatrack_writer"/>
	<privileges update="true"/>
</permission>
<permission>
	<object name="loggers.startup" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="loggers.startup" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="loggers.startup" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="imports.logger_import" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="imports.logger_import" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.import_types" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.import_types" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.import_types" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.mounting_types" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.mounting_types" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.mounting_types" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="individuals.observations" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="individuals.observations" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="individuals.observations" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.breeding_stages" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.breeding_stages" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.breeding_stages" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="views.closed_sessions_not_shutdown" type="view"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.closed_sessions_not_shutdown" type="view"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="views.closed_sessions_not_shutdown" type="view"/>
	<roles names="seatrack_writer"/>
	<privileges update="true"/>
</permission>
<permission>
	<object name="metadata.logger_files" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.logger_files" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.logger_files" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.retrieval_type" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.retrieval_type" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.retrieval_type" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.download_types" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.download_types" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.download_types" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.breeding_success_criterion" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.breeding_success_criterion" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.breeding_success_criterion" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="imports.metadata_import" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="imports.metadata_import" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.euring_codes" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="metadata.euring_codes" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="metadata.euring_codes" type="table"/>
	<roles names="seatrack_metadata_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.deleted_uuid" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.deleted_uuid" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="positions.deleted_uuid" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.used_uuid" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.used_uuid" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="positions.used_uuid" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="views.all_depl_mismatch" type="view"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.all_depl_mismatch" type="view"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="views.all_depl_mismatch" type="view"/>
	<roles names="seatrack_writer"/>
	<privileges update="true"/>
</permission>
<permission>
	<object name="restricted" type="schema"/>
	<roles names="admin"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="restricted" type="schema"/>
	<roles names="seatrack_reader"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="restricted" type="schema"/>
	<roles names="restricted"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="restricted.write" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="restricted.write" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="restricted.read" type="table"/>
	<roles names="seatrack_admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="restricted.read" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="restricted.read" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.users" type="view"/>
	<roles names="seatrack_admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.users" type="view"/>
	<roles names="restricted"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="restricted.users" type="view"/>
	<roles names="seatrack_admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="restricted.users" type="view"/>
	<roles names="restricted"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="restricted.ftp_credentials" type="view"/>
	<roles names="seatrack_admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="restricted.ftp_credentials" type="view"/>
	<roles names="restricted"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="views.export" type="view"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.export" type="view"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="views.export" type="view"/>
	<roles names="seatrack_writer"/>
	<privileges update="true"/>
</permission>
<permission>
	<object name="seatrack.deleted_uuid" type="table"/>
	<roles names="seatrack_admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="seatrack.deleted_uuid" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.test" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="positions.test" type="table"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="positions.test" type="table"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" trigger="true"/>
</permission>
<permission>
	<object name="views.categories" type="view"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.categories" type="view"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="views.longersum" type="view"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.longersum" type="view"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="views.shorttable" type="view"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.shorttable" type="view"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="views.shorttableeqfilter3" type="view"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.shorttableeqfilter3" type="view"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="views.logger_info" type="view"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.logger_info" type="view"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="views.postable2" type="view"/>
	<roles names="seatrack_writer"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.postable2" type="view"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="views.postable2" type="view"/>
	<roles names="seatrack_reader"/>
	<privileges select="true"/>
</permission>
</dbmodel>
